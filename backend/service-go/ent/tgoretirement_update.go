// Code generated by ent, DO NOT EDIT.

package ent

import (
	"aegis/ent/predicate"
	"aegis/ent/tgoretirement"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TGoRetirementUpdate is the builder for updating TGoRetirement entities.
type TGoRetirementUpdate struct {
	config
	hooks    []Hook
	mutation *TGoRetirementMutation
}

// Where appends a list predicates to the TGoRetirementUpdate builder.
func (tru *TGoRetirementUpdate) Where(ps ...predicate.TGoRetirement) *TGoRetirementUpdate {
	tru.mutation.Where(ps...)
	return tru
}

// SetCreationTx sets the "creation_tx" field.
func (tru *TGoRetirementUpdate) SetCreationTx(s string) *TGoRetirementUpdate {
	tru.mutation.SetCreationTx(s)
	return tru
}

// SetNillableCreationTx sets the "creation_tx" field if the given value is not nil.
func (tru *TGoRetirementUpdate) SetNillableCreationTx(s *string) *TGoRetirementUpdate {
	if s != nil {
		tru.SetCreationTx(*s)
	}
	return tru
}

// SetCreatorAddress sets the "creator_address" field.
func (tru *TGoRetirementUpdate) SetCreatorAddress(s string) *TGoRetirementUpdate {
	tru.mutation.SetCreatorAddress(s)
	return tru
}

// SetNillableCreatorAddress sets the "creator_address" field if the given value is not nil.
func (tru *TGoRetirementUpdate) SetNillableCreatorAddress(s *string) *TGoRetirementUpdate {
	if s != nil {
		tru.SetCreatorAddress(*s)
	}
	return tru
}

// SetBeneficiaryAddress sets the "beneficiary_address" field.
func (tru *TGoRetirementUpdate) SetBeneficiaryAddress(s string) *TGoRetirementUpdate {
	tru.mutation.SetBeneficiaryAddress(s)
	return tru
}

// SetNillableBeneficiaryAddress sets the "beneficiary_address" field if the given value is not nil.
func (tru *TGoRetirementUpdate) SetNillableBeneficiaryAddress(s *string) *TGoRetirementUpdate {
	if s != nil {
		tru.SetBeneficiaryAddress(*s)
	}
	return tru
}

// SetAmount sets the "amount" field.
func (tru *TGoRetirementUpdate) SetAmount(f float64) *TGoRetirementUpdate {
	tru.mutation.ResetAmount()
	tru.mutation.SetAmount(f)
	return tru
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (tru *TGoRetirementUpdate) SetNillableAmount(f *float64) *TGoRetirementUpdate {
	if f != nil {
		tru.SetAmount(*f)
	}
	return tru
}

// AddAmount adds f to the "amount" field.
func (tru *TGoRetirementUpdate) AddAmount(f float64) *TGoRetirementUpdate {
	tru.mutation.AddAmount(f)
	return tru
}

// SetTokenAddress sets the "token_address" field.
func (tru *TGoRetirementUpdate) SetTokenAddress(s string) *TGoRetirementUpdate {
	tru.mutation.SetTokenAddress(s)
	return tru
}

// SetNillableTokenAddress sets the "token_address" field if the given value is not nil.
func (tru *TGoRetirementUpdate) SetNillableTokenAddress(s *string) *TGoRetirementUpdate {
	if s != nil {
		tru.SetTokenAddress(*s)
	}
	return tru
}

// SetTokenName sets the "token_name" field.
func (tru *TGoRetirementUpdate) SetTokenName(s string) *TGoRetirementUpdate {
	tru.mutation.SetTokenName(s)
	return tru
}

// SetNillableTokenName sets the "token_name" field if the given value is not nil.
func (tru *TGoRetirementUpdate) SetNillableTokenName(s *string) *TGoRetirementUpdate {
	if s != nil {
		tru.SetTokenName(*s)
	}
	return tru
}

// SetTokenType sets the "token_type" field.
func (tru *TGoRetirementUpdate) SetTokenType(s string) *TGoRetirementUpdate {
	tru.mutation.SetTokenType(s)
	return tru
}

// SetNillableTokenType sets the "token_type" field if the given value is not nil.
func (tru *TGoRetirementUpdate) SetNillableTokenType(s *string) *TGoRetirementUpdate {
	if s != nil {
		tru.SetTokenType(*s)
	}
	return tru
}

// SetRetirementMessage sets the "retirement_message" field.
func (tru *TGoRetirementUpdate) SetRetirementMessage(s string) *TGoRetirementUpdate {
	tru.mutation.SetRetirementMessage(s)
	return tru
}

// SetNillableRetirementMessage sets the "retirement_message" field if the given value is not nil.
func (tru *TGoRetirementUpdate) SetNillableRetirementMessage(s *string) *TGoRetirementUpdate {
	if s != nil {
		tru.SetRetirementMessage(*s)
	}
	return tru
}

// SetRetirementTime sets the "retirement_time" field.
func (tru *TGoRetirementUpdate) SetRetirementTime(t time.Time) *TGoRetirementUpdate {
	tru.mutation.SetRetirementTime(t)
	return tru
}

// SetMtime sets the "mtime" field.
func (tru *TGoRetirementUpdate) SetMtime(t time.Time) *TGoRetirementUpdate {
	tru.mutation.SetMtime(t)
	return tru
}

// SetCtime sets the "ctime" field.
func (tru *TGoRetirementUpdate) SetCtime(t time.Time) *TGoRetirementUpdate {
	tru.mutation.SetCtime(t)
	return tru
}

// SetNillableCtime sets the "ctime" field if the given value is not nil.
func (tru *TGoRetirementUpdate) SetNillableCtime(t *time.Time) *TGoRetirementUpdate {
	if t != nil {
		tru.SetCtime(*t)
	}
	return tru
}

// Mutation returns the TGoRetirementMutation object of the builder.
func (tru *TGoRetirementUpdate) Mutation() *TGoRetirementMutation {
	return tru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tru *TGoRetirementUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tru.defaults()
	if len(tru.hooks) == 0 {
		affected, err = tru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TGoRetirementMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tru.mutation = mutation
			affected, err = tru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tru.hooks) - 1; i >= 0; i-- {
			if tru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tru *TGoRetirementUpdate) SaveX(ctx context.Context) int {
	affected, err := tru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tru *TGoRetirementUpdate) Exec(ctx context.Context) error {
	_, err := tru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tru *TGoRetirementUpdate) ExecX(ctx context.Context) {
	if err := tru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tru *TGoRetirementUpdate) defaults() {
	if _, ok := tru.mutation.Mtime(); !ok {
		v := tgoretirement.UpdateDefaultMtime()
		tru.mutation.SetMtime(v)
	}
}

func (tru *TGoRetirementUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tgoretirement.Table,
			Columns: tgoretirement.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: tgoretirement.FieldID,
			},
		},
	}
	if ps := tru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tru.mutation.CreationTx(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tgoretirement.FieldCreationTx,
		})
	}
	if value, ok := tru.mutation.CreatorAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tgoretirement.FieldCreatorAddress,
		})
	}
	if value, ok := tru.mutation.BeneficiaryAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tgoretirement.FieldBeneficiaryAddress,
		})
	}
	if value, ok := tru.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: tgoretirement.FieldAmount,
		})
	}
	if value, ok := tru.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: tgoretirement.FieldAmount,
		})
	}
	if value, ok := tru.mutation.TokenAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tgoretirement.FieldTokenAddress,
		})
	}
	if value, ok := tru.mutation.TokenName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tgoretirement.FieldTokenName,
		})
	}
	if value, ok := tru.mutation.TokenType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tgoretirement.FieldTokenType,
		})
	}
	if value, ok := tru.mutation.RetirementMessage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tgoretirement.FieldRetirementMessage,
		})
	}
	if value, ok := tru.mutation.RetirementTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tgoretirement.FieldRetirementTime,
		})
	}
	if value, ok := tru.mutation.Mtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tgoretirement.FieldMtime,
		})
	}
	if value, ok := tru.mutation.Ctime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tgoretirement.FieldCtime,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tgoretirement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// TGoRetirementUpdateOne is the builder for updating a single TGoRetirement entity.
type TGoRetirementUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TGoRetirementMutation
}

// SetCreationTx sets the "creation_tx" field.
func (truo *TGoRetirementUpdateOne) SetCreationTx(s string) *TGoRetirementUpdateOne {
	truo.mutation.SetCreationTx(s)
	return truo
}

// SetNillableCreationTx sets the "creation_tx" field if the given value is not nil.
func (truo *TGoRetirementUpdateOne) SetNillableCreationTx(s *string) *TGoRetirementUpdateOne {
	if s != nil {
		truo.SetCreationTx(*s)
	}
	return truo
}

// SetCreatorAddress sets the "creator_address" field.
func (truo *TGoRetirementUpdateOne) SetCreatorAddress(s string) *TGoRetirementUpdateOne {
	truo.mutation.SetCreatorAddress(s)
	return truo
}

// SetNillableCreatorAddress sets the "creator_address" field if the given value is not nil.
func (truo *TGoRetirementUpdateOne) SetNillableCreatorAddress(s *string) *TGoRetirementUpdateOne {
	if s != nil {
		truo.SetCreatorAddress(*s)
	}
	return truo
}

// SetBeneficiaryAddress sets the "beneficiary_address" field.
func (truo *TGoRetirementUpdateOne) SetBeneficiaryAddress(s string) *TGoRetirementUpdateOne {
	truo.mutation.SetBeneficiaryAddress(s)
	return truo
}

// SetNillableBeneficiaryAddress sets the "beneficiary_address" field if the given value is not nil.
func (truo *TGoRetirementUpdateOne) SetNillableBeneficiaryAddress(s *string) *TGoRetirementUpdateOne {
	if s != nil {
		truo.SetBeneficiaryAddress(*s)
	}
	return truo
}

// SetAmount sets the "amount" field.
func (truo *TGoRetirementUpdateOne) SetAmount(f float64) *TGoRetirementUpdateOne {
	truo.mutation.ResetAmount()
	truo.mutation.SetAmount(f)
	return truo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (truo *TGoRetirementUpdateOne) SetNillableAmount(f *float64) *TGoRetirementUpdateOne {
	if f != nil {
		truo.SetAmount(*f)
	}
	return truo
}

// AddAmount adds f to the "amount" field.
func (truo *TGoRetirementUpdateOne) AddAmount(f float64) *TGoRetirementUpdateOne {
	truo.mutation.AddAmount(f)
	return truo
}

// SetTokenAddress sets the "token_address" field.
func (truo *TGoRetirementUpdateOne) SetTokenAddress(s string) *TGoRetirementUpdateOne {
	truo.mutation.SetTokenAddress(s)
	return truo
}

// SetNillableTokenAddress sets the "token_address" field if the given value is not nil.
func (truo *TGoRetirementUpdateOne) SetNillableTokenAddress(s *string) *TGoRetirementUpdateOne {
	if s != nil {
		truo.SetTokenAddress(*s)
	}
	return truo
}

// SetTokenName sets the "token_name" field.
func (truo *TGoRetirementUpdateOne) SetTokenName(s string) *TGoRetirementUpdateOne {
	truo.mutation.SetTokenName(s)
	return truo
}

// SetNillableTokenName sets the "token_name" field if the given value is not nil.
func (truo *TGoRetirementUpdateOne) SetNillableTokenName(s *string) *TGoRetirementUpdateOne {
	if s != nil {
		truo.SetTokenName(*s)
	}
	return truo
}

// SetTokenType sets the "token_type" field.
func (truo *TGoRetirementUpdateOne) SetTokenType(s string) *TGoRetirementUpdateOne {
	truo.mutation.SetTokenType(s)
	return truo
}

// SetNillableTokenType sets the "token_type" field if the given value is not nil.
func (truo *TGoRetirementUpdateOne) SetNillableTokenType(s *string) *TGoRetirementUpdateOne {
	if s != nil {
		truo.SetTokenType(*s)
	}
	return truo
}

// SetRetirementMessage sets the "retirement_message" field.
func (truo *TGoRetirementUpdateOne) SetRetirementMessage(s string) *TGoRetirementUpdateOne {
	truo.mutation.SetRetirementMessage(s)
	return truo
}

// SetNillableRetirementMessage sets the "retirement_message" field if the given value is not nil.
func (truo *TGoRetirementUpdateOne) SetNillableRetirementMessage(s *string) *TGoRetirementUpdateOne {
	if s != nil {
		truo.SetRetirementMessage(*s)
	}
	return truo
}

// SetRetirementTime sets the "retirement_time" field.
func (truo *TGoRetirementUpdateOne) SetRetirementTime(t time.Time) *TGoRetirementUpdateOne {
	truo.mutation.SetRetirementTime(t)
	return truo
}

// SetMtime sets the "mtime" field.
func (truo *TGoRetirementUpdateOne) SetMtime(t time.Time) *TGoRetirementUpdateOne {
	truo.mutation.SetMtime(t)
	return truo
}

// SetCtime sets the "ctime" field.
func (truo *TGoRetirementUpdateOne) SetCtime(t time.Time) *TGoRetirementUpdateOne {
	truo.mutation.SetCtime(t)
	return truo
}

// SetNillableCtime sets the "ctime" field if the given value is not nil.
func (truo *TGoRetirementUpdateOne) SetNillableCtime(t *time.Time) *TGoRetirementUpdateOne {
	if t != nil {
		truo.SetCtime(*t)
	}
	return truo
}

// Mutation returns the TGoRetirementMutation object of the builder.
func (truo *TGoRetirementUpdateOne) Mutation() *TGoRetirementMutation {
	return truo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (truo *TGoRetirementUpdateOne) Select(field string, fields ...string) *TGoRetirementUpdateOne {
	truo.fields = append([]string{field}, fields...)
	return truo
}

// Save executes the query and returns the updated TGoRetirement entity.
func (truo *TGoRetirementUpdateOne) Save(ctx context.Context) (*TGoRetirement, error) {
	var (
		err  error
		node *TGoRetirement
	)
	truo.defaults()
	if len(truo.hooks) == 0 {
		node, err = truo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TGoRetirementMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			truo.mutation = mutation
			node, err = truo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(truo.hooks) - 1; i >= 0; i-- {
			if truo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = truo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, truo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TGoRetirement)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TGoRetirementMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (truo *TGoRetirementUpdateOne) SaveX(ctx context.Context) *TGoRetirement {
	node, err := truo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (truo *TGoRetirementUpdateOne) Exec(ctx context.Context) error {
	_, err := truo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (truo *TGoRetirementUpdateOne) ExecX(ctx context.Context) {
	if err := truo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (truo *TGoRetirementUpdateOne) defaults() {
	if _, ok := truo.mutation.Mtime(); !ok {
		v := tgoretirement.UpdateDefaultMtime()
		truo.mutation.SetMtime(v)
	}
}

func (truo *TGoRetirementUpdateOne) sqlSave(ctx context.Context) (_node *TGoRetirement, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tgoretirement.Table,
			Columns: tgoretirement.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: tgoretirement.FieldID,
			},
		},
	}
	id, ok := truo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TGoRetirement.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := truo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tgoretirement.FieldID)
		for _, f := range fields {
			if !tgoretirement.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tgoretirement.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := truo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := truo.mutation.CreationTx(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tgoretirement.FieldCreationTx,
		})
	}
	if value, ok := truo.mutation.CreatorAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tgoretirement.FieldCreatorAddress,
		})
	}
	if value, ok := truo.mutation.BeneficiaryAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tgoretirement.FieldBeneficiaryAddress,
		})
	}
	if value, ok := truo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: tgoretirement.FieldAmount,
		})
	}
	if value, ok := truo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: tgoretirement.FieldAmount,
		})
	}
	if value, ok := truo.mutation.TokenAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tgoretirement.FieldTokenAddress,
		})
	}
	if value, ok := truo.mutation.TokenName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tgoretirement.FieldTokenName,
		})
	}
	if value, ok := truo.mutation.TokenType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tgoretirement.FieldTokenType,
		})
	}
	if value, ok := truo.mutation.RetirementMessage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tgoretirement.FieldRetirementMessage,
		})
	}
	if value, ok := truo.mutation.RetirementTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tgoretirement.FieldRetirementTime,
		})
	}
	if value, ok := truo.mutation.Mtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tgoretirement.FieldMtime,
		})
	}
	if value, ok := truo.mutation.Ctime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tgoretirement.FieldCtime,
		})
	}
	_node = &TGoRetirement{config: truo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, truo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tgoretirement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
