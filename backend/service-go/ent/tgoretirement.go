// Code generated by ent, DO NOT EDIT.

package ent

import (
	"aegis/ent/tgoretirement"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// TGoRetirement is the model entity for the TGoRetirement schema.
type TGoRetirement struct {
	config `json:"-"`
	// ID of the ent.
	// auto increment primary key
	ID uint64 `json:"id,omitempty"`
	// creation hash of the certificate
	CreationTx string `json:"creation_tx,omitempty"`
	// creator of the certificate
	CreatorAddress string `json:"creator_address,omitempty"`
	// beneficiary of the certificate
	BeneficiaryAddress string `json:"beneficiary_address,omitempty"`
	// amount of retirement
	Amount float64 `json:"amount,omitempty"`
	// token address
	TokenAddress string `json:"token_address,omitempty"`
	// token name
	TokenName string `json:"token_name,omitempty"`
	// type of token such as nct, bct...
	TokenType string `json:"token_type,omitempty"`
	// message  of retirement
	RetirementMessage string `json:"retirement_message,omitempty"`
	// time of retirement
	RetirementTime time.Time `json:"retirement_time,omitempty"`
	// modify time
	Mtime time.Time `json:"mtime,omitempty"`
	// create time
	Ctime time.Time `json:"ctime,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TGoRetirement) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case tgoretirement.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case tgoretirement.FieldID:
			values[i] = new(sql.NullInt64)
		case tgoretirement.FieldCreationTx, tgoretirement.FieldCreatorAddress, tgoretirement.FieldBeneficiaryAddress, tgoretirement.FieldTokenAddress, tgoretirement.FieldTokenName, tgoretirement.FieldTokenType, tgoretirement.FieldRetirementMessage:
			values[i] = new(sql.NullString)
		case tgoretirement.FieldRetirementTime, tgoretirement.FieldMtime, tgoretirement.FieldCtime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TGoRetirement", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TGoRetirement fields.
func (tr *TGoRetirement) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tgoretirement.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tr.ID = uint64(value.Int64)
		case tgoretirement.FieldCreationTx:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field creation_tx", values[i])
			} else if value.Valid {
				tr.CreationTx = value.String
			}
		case tgoretirement.FieldCreatorAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field creator_address", values[i])
			} else if value.Valid {
				tr.CreatorAddress = value.String
			}
		case tgoretirement.FieldBeneficiaryAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field beneficiary_address", values[i])
			} else if value.Valid {
				tr.BeneficiaryAddress = value.String
			}
		case tgoretirement.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				tr.Amount = value.Float64
			}
		case tgoretirement.FieldTokenAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token_address", values[i])
			} else if value.Valid {
				tr.TokenAddress = value.String
			}
		case tgoretirement.FieldTokenName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token_name", values[i])
			} else if value.Valid {
				tr.TokenName = value.String
			}
		case tgoretirement.FieldTokenType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token_type", values[i])
			} else if value.Valid {
				tr.TokenType = value.String
			}
		case tgoretirement.FieldRetirementMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field retirement_message", values[i])
			} else if value.Valid {
				tr.RetirementMessage = value.String
			}
		case tgoretirement.FieldRetirementTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field retirement_time", values[i])
			} else if value.Valid {
				tr.RetirementTime = value.Time
			}
		case tgoretirement.FieldMtime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field mtime", values[i])
			} else if value.Valid {
				tr.Mtime = value.Time
			}
		case tgoretirement.FieldCtime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ctime", values[i])
			} else if value.Valid {
				tr.Ctime = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this TGoRetirement.
// Note that you need to call TGoRetirement.Unwrap() before calling this method if this TGoRetirement
// was returned from a transaction, and the transaction was committed or rolled back.
func (tr *TGoRetirement) Update() *TGoRetirementUpdateOne {
	return (&TGoRetirementClient{config: tr.config}).UpdateOne(tr)
}

// Unwrap unwraps the TGoRetirement entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tr *TGoRetirement) Unwrap() *TGoRetirement {
	_tx, ok := tr.config.driver.(*txDriver)
	if !ok {
		panic("ent: TGoRetirement is not a transactional entity")
	}
	tr.config.driver = _tx.drv
	return tr
}

// String implements the fmt.Stringer.
func (tr *TGoRetirement) String() string {
	var builder strings.Builder
	builder.WriteString("TGoRetirement(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tr.ID))
	builder.WriteString("creation_tx=")
	builder.WriteString(tr.CreationTx)
	builder.WriteString(", ")
	builder.WriteString("creator_address=")
	builder.WriteString(tr.CreatorAddress)
	builder.WriteString(", ")
	builder.WriteString("beneficiary_address=")
	builder.WriteString(tr.BeneficiaryAddress)
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", tr.Amount))
	builder.WriteString(", ")
	builder.WriteString("token_address=")
	builder.WriteString(tr.TokenAddress)
	builder.WriteString(", ")
	builder.WriteString("token_name=")
	builder.WriteString(tr.TokenName)
	builder.WriteString(", ")
	builder.WriteString("token_type=")
	builder.WriteString(tr.TokenType)
	builder.WriteString(", ")
	builder.WriteString("retirement_message=")
	builder.WriteString(tr.RetirementMessage)
	builder.WriteString(", ")
	builder.WriteString("retirement_time=")
	builder.WriteString(tr.RetirementTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("mtime=")
	builder.WriteString(tr.Mtime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ctime=")
	builder.WriteString(tr.Ctime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TGoRetirements is a parsable slice of TGoRetirement.
type TGoRetirements []*TGoRetirement

func (tr TGoRetirements) config(cfg config) {
	for _i := range tr {
		tr[_i].config = cfg
	}
}
