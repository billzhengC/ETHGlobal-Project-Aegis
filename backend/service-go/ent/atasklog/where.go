// Code generated by ent, DO NOT EDIT.

package atasklog

import (
	"aegis/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// QuestID applies equality check predicate on the "quest_id" field. It's identical to QuestIDEQ.
func QuestID(v uint64) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuestID), v))
	})
}

// TaskID applies equality check predicate on the "task_id" field. It's identical to TaskIDEQ.
func TaskID(v uint64) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskID), v))
	})
}

// Mid applies equality check predicate on the "mid" field. It's identical to MidEQ.
func Mid(v uint64) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMid), v))
	})
}

// Meta applies equality check predicate on the "meta" field. It's identical to MetaEQ.
func Meta(v string) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMeta), v))
	})
}

// Mtime applies equality check predicate on the "mtime" field. It's identical to MtimeEQ.
func Mtime(v time.Time) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMtime), v))
	})
}

// Ctime applies equality check predicate on the "ctime" field. It's identical to CtimeEQ.
func Ctime(v time.Time) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCtime), v))
	})
}

// QuestIDEQ applies the EQ predicate on the "quest_id" field.
func QuestIDEQ(v uint64) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuestID), v))
	})
}

// QuestIDNEQ applies the NEQ predicate on the "quest_id" field.
func QuestIDNEQ(v uint64) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQuestID), v))
	})
}

// QuestIDIn applies the In predicate on the "quest_id" field.
func QuestIDIn(vs ...uint64) predicate.ATaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldQuestID), v...))
	})
}

// QuestIDNotIn applies the NotIn predicate on the "quest_id" field.
func QuestIDNotIn(vs ...uint64) predicate.ATaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldQuestID), v...))
	})
}

// QuestIDGT applies the GT predicate on the "quest_id" field.
func QuestIDGT(v uint64) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQuestID), v))
	})
}

// QuestIDGTE applies the GTE predicate on the "quest_id" field.
func QuestIDGTE(v uint64) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQuestID), v))
	})
}

// QuestIDLT applies the LT predicate on the "quest_id" field.
func QuestIDLT(v uint64) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQuestID), v))
	})
}

// QuestIDLTE applies the LTE predicate on the "quest_id" field.
func QuestIDLTE(v uint64) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQuestID), v))
	})
}

// TaskIDEQ applies the EQ predicate on the "task_id" field.
func TaskIDEQ(v uint64) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskID), v))
	})
}

// TaskIDNEQ applies the NEQ predicate on the "task_id" field.
func TaskIDNEQ(v uint64) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTaskID), v))
	})
}

// TaskIDIn applies the In predicate on the "task_id" field.
func TaskIDIn(vs ...uint64) predicate.ATaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTaskID), v...))
	})
}

// TaskIDNotIn applies the NotIn predicate on the "task_id" field.
func TaskIDNotIn(vs ...uint64) predicate.ATaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTaskID), v...))
	})
}

// TaskIDGT applies the GT predicate on the "task_id" field.
func TaskIDGT(v uint64) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTaskID), v))
	})
}

// TaskIDGTE applies the GTE predicate on the "task_id" field.
func TaskIDGTE(v uint64) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTaskID), v))
	})
}

// TaskIDLT applies the LT predicate on the "task_id" field.
func TaskIDLT(v uint64) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTaskID), v))
	})
}

// TaskIDLTE applies the LTE predicate on the "task_id" field.
func TaskIDLTE(v uint64) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTaskID), v))
	})
}

// MidEQ applies the EQ predicate on the "mid" field.
func MidEQ(v uint64) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMid), v))
	})
}

// MidNEQ applies the NEQ predicate on the "mid" field.
func MidNEQ(v uint64) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMid), v))
	})
}

// MidIn applies the In predicate on the "mid" field.
func MidIn(vs ...uint64) predicate.ATaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMid), v...))
	})
}

// MidNotIn applies the NotIn predicate on the "mid" field.
func MidNotIn(vs ...uint64) predicate.ATaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMid), v...))
	})
}

// MidGT applies the GT predicate on the "mid" field.
func MidGT(v uint64) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMid), v))
	})
}

// MidGTE applies the GTE predicate on the "mid" field.
func MidGTE(v uint64) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMid), v))
	})
}

// MidLT applies the LT predicate on the "mid" field.
func MidLT(v uint64) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMid), v))
	})
}

// MidLTE applies the LTE predicate on the "mid" field.
func MidLTE(v uint64) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMid), v))
	})
}

// MetaEQ applies the EQ predicate on the "meta" field.
func MetaEQ(v string) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMeta), v))
	})
}

// MetaNEQ applies the NEQ predicate on the "meta" field.
func MetaNEQ(v string) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMeta), v))
	})
}

// MetaIn applies the In predicate on the "meta" field.
func MetaIn(vs ...string) predicate.ATaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMeta), v...))
	})
}

// MetaNotIn applies the NotIn predicate on the "meta" field.
func MetaNotIn(vs ...string) predicate.ATaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMeta), v...))
	})
}

// MetaGT applies the GT predicate on the "meta" field.
func MetaGT(v string) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMeta), v))
	})
}

// MetaGTE applies the GTE predicate on the "meta" field.
func MetaGTE(v string) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMeta), v))
	})
}

// MetaLT applies the LT predicate on the "meta" field.
func MetaLT(v string) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMeta), v))
	})
}

// MetaLTE applies the LTE predicate on the "meta" field.
func MetaLTE(v string) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMeta), v))
	})
}

// MetaContains applies the Contains predicate on the "meta" field.
func MetaContains(v string) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMeta), v))
	})
}

// MetaHasPrefix applies the HasPrefix predicate on the "meta" field.
func MetaHasPrefix(v string) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMeta), v))
	})
}

// MetaHasSuffix applies the HasSuffix predicate on the "meta" field.
func MetaHasSuffix(v string) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMeta), v))
	})
}

// MetaEqualFold applies the EqualFold predicate on the "meta" field.
func MetaEqualFold(v string) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMeta), v))
	})
}

// MetaContainsFold applies the ContainsFold predicate on the "meta" field.
func MetaContainsFold(v string) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMeta), v))
	})
}

// MtimeEQ applies the EQ predicate on the "mtime" field.
func MtimeEQ(v time.Time) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMtime), v))
	})
}

// MtimeNEQ applies the NEQ predicate on the "mtime" field.
func MtimeNEQ(v time.Time) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMtime), v))
	})
}

// MtimeIn applies the In predicate on the "mtime" field.
func MtimeIn(vs ...time.Time) predicate.ATaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMtime), v...))
	})
}

// MtimeNotIn applies the NotIn predicate on the "mtime" field.
func MtimeNotIn(vs ...time.Time) predicate.ATaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMtime), v...))
	})
}

// MtimeGT applies the GT predicate on the "mtime" field.
func MtimeGT(v time.Time) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMtime), v))
	})
}

// MtimeGTE applies the GTE predicate on the "mtime" field.
func MtimeGTE(v time.Time) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMtime), v))
	})
}

// MtimeLT applies the LT predicate on the "mtime" field.
func MtimeLT(v time.Time) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMtime), v))
	})
}

// MtimeLTE applies the LTE predicate on the "mtime" field.
func MtimeLTE(v time.Time) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMtime), v))
	})
}

// CtimeEQ applies the EQ predicate on the "ctime" field.
func CtimeEQ(v time.Time) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCtime), v))
	})
}

// CtimeNEQ applies the NEQ predicate on the "ctime" field.
func CtimeNEQ(v time.Time) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCtime), v))
	})
}

// CtimeIn applies the In predicate on the "ctime" field.
func CtimeIn(vs ...time.Time) predicate.ATaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCtime), v...))
	})
}

// CtimeNotIn applies the NotIn predicate on the "ctime" field.
func CtimeNotIn(vs ...time.Time) predicate.ATaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCtime), v...))
	})
}

// CtimeGT applies the GT predicate on the "ctime" field.
func CtimeGT(v time.Time) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCtime), v))
	})
}

// CtimeGTE applies the GTE predicate on the "ctime" field.
func CtimeGTE(v time.Time) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCtime), v))
	})
}

// CtimeLT applies the LT predicate on the "ctime" field.
func CtimeLT(v time.Time) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCtime), v))
	})
}

// CtimeLTE applies the LTE predicate on the "ctime" field.
func CtimeLTE(v time.Time) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCtime), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ATaskLog) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ATaskLog) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ATaskLog) predicate.ATaskLog {
	return predicate.ATaskLog(func(s *sql.Selector) {
		p(s.Not())
	})
}
