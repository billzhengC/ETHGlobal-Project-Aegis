// Code generated by ent, DO NOT EDIT.

package ent

import (
	"aegis/ent/predicate"
	"aegis/ent/tgocache"
	"aegis/ent/tgoens"
	"aegis/ent/tgonft"
	"aegis/ent/tgoretirement"
	"aegis/ent/tuser"
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeTGoCache      = "TGoCache"
	TypeTGoEns        = "TGoEns"
	TypeTGoNFT        = "TGoNFT"
	TypeTGoRetirement = "TGoRetirement"
	TypeTUser         = "TUser"
)

// TGoCacheMutation represents an operation that mutates the TGoCache nodes in the graph.
type TGoCacheMutation struct {
	config
	op            Op
	typ           string
	id            *uint64
	cache_key     *string
	cache_value   *string
	mtime         *time.Time
	ctime         *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*TGoCache, error)
	predicates    []predicate.TGoCache
}

var _ ent.Mutation = (*TGoCacheMutation)(nil)

// tgocacheOption allows management of the mutation configuration using functional options.
type tgocacheOption func(*TGoCacheMutation)

// newTGoCacheMutation creates new mutation for the TGoCache entity.
func newTGoCacheMutation(c config, op Op, opts ...tgocacheOption) *TGoCacheMutation {
	m := &TGoCacheMutation{
		config:        c,
		op:            op,
		typ:           TypeTGoCache,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTGoCacheID sets the ID field of the mutation.
func withTGoCacheID(id uint64) tgocacheOption {
	return func(m *TGoCacheMutation) {
		var (
			err   error
			once  sync.Once
			value *TGoCache
		)
		m.oldValue = func(ctx context.Context) (*TGoCache, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TGoCache.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTGoCache sets the old TGoCache of the mutation.
func withTGoCache(node *TGoCache) tgocacheOption {
	return func(m *TGoCacheMutation) {
		m.oldValue = func(context.Context) (*TGoCache, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TGoCacheMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TGoCacheMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TGoCache entities.
func (m *TGoCacheMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TGoCacheMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TGoCacheMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TGoCache.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCacheKey sets the "cache_key" field.
func (m *TGoCacheMutation) SetCacheKey(s string) {
	m.cache_key = &s
}

// CacheKey returns the value of the "cache_key" field in the mutation.
func (m *TGoCacheMutation) CacheKey() (r string, exists bool) {
	v := m.cache_key
	if v == nil {
		return
	}
	return *v, true
}

// OldCacheKey returns the old "cache_key" field's value of the TGoCache entity.
// If the TGoCache object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TGoCacheMutation) OldCacheKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCacheKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCacheKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCacheKey: %w", err)
	}
	return oldValue.CacheKey, nil
}

// ResetCacheKey resets all changes to the "cache_key" field.
func (m *TGoCacheMutation) ResetCacheKey() {
	m.cache_key = nil
}

// SetCacheValue sets the "cache_value" field.
func (m *TGoCacheMutation) SetCacheValue(s string) {
	m.cache_value = &s
}

// CacheValue returns the value of the "cache_value" field in the mutation.
func (m *TGoCacheMutation) CacheValue() (r string, exists bool) {
	v := m.cache_value
	if v == nil {
		return
	}
	return *v, true
}

// OldCacheValue returns the old "cache_value" field's value of the TGoCache entity.
// If the TGoCache object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TGoCacheMutation) OldCacheValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCacheValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCacheValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCacheValue: %w", err)
	}
	return oldValue.CacheValue, nil
}

// ResetCacheValue resets all changes to the "cache_value" field.
func (m *TGoCacheMutation) ResetCacheValue() {
	m.cache_value = nil
}

// SetMtime sets the "mtime" field.
func (m *TGoCacheMutation) SetMtime(t time.Time) {
	m.mtime = &t
}

// Mtime returns the value of the "mtime" field in the mutation.
func (m *TGoCacheMutation) Mtime() (r time.Time, exists bool) {
	v := m.mtime
	if v == nil {
		return
	}
	return *v, true
}

// OldMtime returns the old "mtime" field's value of the TGoCache entity.
// If the TGoCache object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TGoCacheMutation) OldMtime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMtime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMtime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMtime: %w", err)
	}
	return oldValue.Mtime, nil
}

// ResetMtime resets all changes to the "mtime" field.
func (m *TGoCacheMutation) ResetMtime() {
	m.mtime = nil
}

// SetCtime sets the "ctime" field.
func (m *TGoCacheMutation) SetCtime(t time.Time) {
	m.ctime = &t
}

// Ctime returns the value of the "ctime" field in the mutation.
func (m *TGoCacheMutation) Ctime() (r time.Time, exists bool) {
	v := m.ctime
	if v == nil {
		return
	}
	return *v, true
}

// OldCtime returns the old "ctime" field's value of the TGoCache entity.
// If the TGoCache object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TGoCacheMutation) OldCtime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCtime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCtime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCtime: %w", err)
	}
	return oldValue.Ctime, nil
}

// ResetCtime resets all changes to the "ctime" field.
func (m *TGoCacheMutation) ResetCtime() {
	m.ctime = nil
}

// Where appends a list predicates to the TGoCacheMutation builder.
func (m *TGoCacheMutation) Where(ps ...predicate.TGoCache) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TGoCacheMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TGoCache).
func (m *TGoCacheMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TGoCacheMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.cache_key != nil {
		fields = append(fields, tgocache.FieldCacheKey)
	}
	if m.cache_value != nil {
		fields = append(fields, tgocache.FieldCacheValue)
	}
	if m.mtime != nil {
		fields = append(fields, tgocache.FieldMtime)
	}
	if m.ctime != nil {
		fields = append(fields, tgocache.FieldCtime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TGoCacheMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tgocache.FieldCacheKey:
		return m.CacheKey()
	case tgocache.FieldCacheValue:
		return m.CacheValue()
	case tgocache.FieldMtime:
		return m.Mtime()
	case tgocache.FieldCtime:
		return m.Ctime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TGoCacheMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tgocache.FieldCacheKey:
		return m.OldCacheKey(ctx)
	case tgocache.FieldCacheValue:
		return m.OldCacheValue(ctx)
	case tgocache.FieldMtime:
		return m.OldMtime(ctx)
	case tgocache.FieldCtime:
		return m.OldCtime(ctx)
	}
	return nil, fmt.Errorf("unknown TGoCache field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TGoCacheMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tgocache.FieldCacheKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCacheKey(v)
		return nil
	case tgocache.FieldCacheValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCacheValue(v)
		return nil
	case tgocache.FieldMtime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMtime(v)
		return nil
	case tgocache.FieldCtime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCtime(v)
		return nil
	}
	return fmt.Errorf("unknown TGoCache field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TGoCacheMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TGoCacheMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TGoCacheMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TGoCache numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TGoCacheMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TGoCacheMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TGoCacheMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TGoCache nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TGoCacheMutation) ResetField(name string) error {
	switch name {
	case tgocache.FieldCacheKey:
		m.ResetCacheKey()
		return nil
	case tgocache.FieldCacheValue:
		m.ResetCacheValue()
		return nil
	case tgocache.FieldMtime:
		m.ResetMtime()
		return nil
	case tgocache.FieldCtime:
		m.ResetCtime()
		return nil
	}
	return fmt.Errorf("unknown TGoCache field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TGoCacheMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TGoCacheMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TGoCacheMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TGoCacheMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TGoCacheMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TGoCacheMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TGoCacheMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TGoCache unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TGoCacheMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TGoCache edge %s", name)
}

// TGoEnsMutation represents an operation that mutates the TGoEns nodes in the graph.
type TGoEnsMutation struct {
	config
	op            Op
	typ           string
	id            *uint64
	wallet_pub    *string
	ens           *string
	mtime         *time.Time
	ctime         *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*TGoEns, error)
	predicates    []predicate.TGoEns
}

var _ ent.Mutation = (*TGoEnsMutation)(nil)

// tgoensOption allows management of the mutation configuration using functional options.
type tgoensOption func(*TGoEnsMutation)

// newTGoEnsMutation creates new mutation for the TGoEns entity.
func newTGoEnsMutation(c config, op Op, opts ...tgoensOption) *TGoEnsMutation {
	m := &TGoEnsMutation{
		config:        c,
		op:            op,
		typ:           TypeTGoEns,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTGoEnsID sets the ID field of the mutation.
func withTGoEnsID(id uint64) tgoensOption {
	return func(m *TGoEnsMutation) {
		var (
			err   error
			once  sync.Once
			value *TGoEns
		)
		m.oldValue = func(ctx context.Context) (*TGoEns, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TGoEns.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTGoEns sets the old TGoEns of the mutation.
func withTGoEns(node *TGoEns) tgoensOption {
	return func(m *TGoEnsMutation) {
		m.oldValue = func(context.Context) (*TGoEns, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TGoEnsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TGoEnsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TGoEns entities.
func (m *TGoEnsMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TGoEnsMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TGoEnsMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TGoEns.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetWalletPub sets the "wallet_pub" field.
func (m *TGoEnsMutation) SetWalletPub(s string) {
	m.wallet_pub = &s
}

// WalletPub returns the value of the "wallet_pub" field in the mutation.
func (m *TGoEnsMutation) WalletPub() (r string, exists bool) {
	v := m.wallet_pub
	if v == nil {
		return
	}
	return *v, true
}

// OldWalletPub returns the old "wallet_pub" field's value of the TGoEns entity.
// If the TGoEns object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TGoEnsMutation) OldWalletPub(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWalletPub is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWalletPub requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWalletPub: %w", err)
	}
	return oldValue.WalletPub, nil
}

// ResetWalletPub resets all changes to the "wallet_pub" field.
func (m *TGoEnsMutation) ResetWalletPub() {
	m.wallet_pub = nil
}

// SetEns sets the "ens" field.
func (m *TGoEnsMutation) SetEns(s string) {
	m.ens = &s
}

// Ens returns the value of the "ens" field in the mutation.
func (m *TGoEnsMutation) Ens() (r string, exists bool) {
	v := m.ens
	if v == nil {
		return
	}
	return *v, true
}

// OldEns returns the old "ens" field's value of the TGoEns entity.
// If the TGoEns object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TGoEnsMutation) OldEns(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEns is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEns requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEns: %w", err)
	}
	return oldValue.Ens, nil
}

// ResetEns resets all changes to the "ens" field.
func (m *TGoEnsMutation) ResetEns() {
	m.ens = nil
}

// SetMtime sets the "mtime" field.
func (m *TGoEnsMutation) SetMtime(t time.Time) {
	m.mtime = &t
}

// Mtime returns the value of the "mtime" field in the mutation.
func (m *TGoEnsMutation) Mtime() (r time.Time, exists bool) {
	v := m.mtime
	if v == nil {
		return
	}
	return *v, true
}

// OldMtime returns the old "mtime" field's value of the TGoEns entity.
// If the TGoEns object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TGoEnsMutation) OldMtime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMtime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMtime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMtime: %w", err)
	}
	return oldValue.Mtime, nil
}

// ResetMtime resets all changes to the "mtime" field.
func (m *TGoEnsMutation) ResetMtime() {
	m.mtime = nil
}

// SetCtime sets the "ctime" field.
func (m *TGoEnsMutation) SetCtime(t time.Time) {
	m.ctime = &t
}

// Ctime returns the value of the "ctime" field in the mutation.
func (m *TGoEnsMutation) Ctime() (r time.Time, exists bool) {
	v := m.ctime
	if v == nil {
		return
	}
	return *v, true
}

// OldCtime returns the old "ctime" field's value of the TGoEns entity.
// If the TGoEns object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TGoEnsMutation) OldCtime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCtime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCtime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCtime: %w", err)
	}
	return oldValue.Ctime, nil
}

// ResetCtime resets all changes to the "ctime" field.
func (m *TGoEnsMutation) ResetCtime() {
	m.ctime = nil
}

// Where appends a list predicates to the TGoEnsMutation builder.
func (m *TGoEnsMutation) Where(ps ...predicate.TGoEns) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TGoEnsMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TGoEns).
func (m *TGoEnsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TGoEnsMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.wallet_pub != nil {
		fields = append(fields, tgoens.FieldWalletPub)
	}
	if m.ens != nil {
		fields = append(fields, tgoens.FieldEns)
	}
	if m.mtime != nil {
		fields = append(fields, tgoens.FieldMtime)
	}
	if m.ctime != nil {
		fields = append(fields, tgoens.FieldCtime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TGoEnsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tgoens.FieldWalletPub:
		return m.WalletPub()
	case tgoens.FieldEns:
		return m.Ens()
	case tgoens.FieldMtime:
		return m.Mtime()
	case tgoens.FieldCtime:
		return m.Ctime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TGoEnsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tgoens.FieldWalletPub:
		return m.OldWalletPub(ctx)
	case tgoens.FieldEns:
		return m.OldEns(ctx)
	case tgoens.FieldMtime:
		return m.OldMtime(ctx)
	case tgoens.FieldCtime:
		return m.OldCtime(ctx)
	}
	return nil, fmt.Errorf("unknown TGoEns field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TGoEnsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tgoens.FieldWalletPub:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWalletPub(v)
		return nil
	case tgoens.FieldEns:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEns(v)
		return nil
	case tgoens.FieldMtime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMtime(v)
		return nil
	case tgoens.FieldCtime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCtime(v)
		return nil
	}
	return fmt.Errorf("unknown TGoEns field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TGoEnsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TGoEnsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TGoEnsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TGoEns numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TGoEnsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TGoEnsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TGoEnsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TGoEns nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TGoEnsMutation) ResetField(name string) error {
	switch name {
	case tgoens.FieldWalletPub:
		m.ResetWalletPub()
		return nil
	case tgoens.FieldEns:
		m.ResetEns()
		return nil
	case tgoens.FieldMtime:
		m.ResetMtime()
		return nil
	case tgoens.FieldCtime:
		m.ResetCtime()
		return nil
	}
	return fmt.Errorf("unknown TGoEns field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TGoEnsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TGoEnsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TGoEnsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TGoEnsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TGoEnsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TGoEnsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TGoEnsMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TGoEns unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TGoEnsMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TGoEns edge %s", name)
}

// TGoNFTMutation represents an operation that mutates the TGoNFT nodes in the graph.
type TGoNFTMutation struct {
	config
	op             Op
	typ            string
	id             *uint64
	wallet_pub     *string
	rank_type      *int
	addrank_type   *int
	rank_year      *int
	addrank_year   *int
	rank_season    *int
	addrank_season *int
	rank           *int
	addrank        *int
	mint_tx        *string
	mtime          *time.Time
	ctime          *time.Time
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*TGoNFT, error)
	predicates     []predicate.TGoNFT
}

var _ ent.Mutation = (*TGoNFTMutation)(nil)

// tgonftOption allows management of the mutation configuration using functional options.
type tgonftOption func(*TGoNFTMutation)

// newTGoNFTMutation creates new mutation for the TGoNFT entity.
func newTGoNFTMutation(c config, op Op, opts ...tgonftOption) *TGoNFTMutation {
	m := &TGoNFTMutation{
		config:        c,
		op:            op,
		typ:           TypeTGoNFT,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTGoNFTID sets the ID field of the mutation.
func withTGoNFTID(id uint64) tgonftOption {
	return func(m *TGoNFTMutation) {
		var (
			err   error
			once  sync.Once
			value *TGoNFT
		)
		m.oldValue = func(ctx context.Context) (*TGoNFT, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TGoNFT.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTGoNFT sets the old TGoNFT of the mutation.
func withTGoNFT(node *TGoNFT) tgonftOption {
	return func(m *TGoNFTMutation) {
		m.oldValue = func(context.Context) (*TGoNFT, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TGoNFTMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TGoNFTMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TGoNFT entities.
func (m *TGoNFTMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TGoNFTMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TGoNFTMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TGoNFT.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetWalletPub sets the "wallet_pub" field.
func (m *TGoNFTMutation) SetWalletPub(s string) {
	m.wallet_pub = &s
}

// WalletPub returns the value of the "wallet_pub" field in the mutation.
func (m *TGoNFTMutation) WalletPub() (r string, exists bool) {
	v := m.wallet_pub
	if v == nil {
		return
	}
	return *v, true
}

// OldWalletPub returns the old "wallet_pub" field's value of the TGoNFT entity.
// If the TGoNFT object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TGoNFTMutation) OldWalletPub(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWalletPub is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWalletPub requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWalletPub: %w", err)
	}
	return oldValue.WalletPub, nil
}

// ResetWalletPub resets all changes to the "wallet_pub" field.
func (m *TGoNFTMutation) ResetWalletPub() {
	m.wallet_pub = nil
}

// SetRankType sets the "rank_type" field.
func (m *TGoNFTMutation) SetRankType(i int) {
	m.rank_type = &i
	m.addrank_type = nil
}

// RankType returns the value of the "rank_type" field in the mutation.
func (m *TGoNFTMutation) RankType() (r int, exists bool) {
	v := m.rank_type
	if v == nil {
		return
	}
	return *v, true
}

// OldRankType returns the old "rank_type" field's value of the TGoNFT entity.
// If the TGoNFT object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TGoNFTMutation) OldRankType(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRankType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRankType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRankType: %w", err)
	}
	return oldValue.RankType, nil
}

// AddRankType adds i to the "rank_type" field.
func (m *TGoNFTMutation) AddRankType(i int) {
	if m.addrank_type != nil {
		*m.addrank_type += i
	} else {
		m.addrank_type = &i
	}
}

// AddedRankType returns the value that was added to the "rank_type" field in this mutation.
func (m *TGoNFTMutation) AddedRankType() (r int, exists bool) {
	v := m.addrank_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetRankType resets all changes to the "rank_type" field.
func (m *TGoNFTMutation) ResetRankType() {
	m.rank_type = nil
	m.addrank_type = nil
}

// SetRankYear sets the "rank_year" field.
func (m *TGoNFTMutation) SetRankYear(i int) {
	m.rank_year = &i
	m.addrank_year = nil
}

// RankYear returns the value of the "rank_year" field in the mutation.
func (m *TGoNFTMutation) RankYear() (r int, exists bool) {
	v := m.rank_year
	if v == nil {
		return
	}
	return *v, true
}

// OldRankYear returns the old "rank_year" field's value of the TGoNFT entity.
// If the TGoNFT object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TGoNFTMutation) OldRankYear(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRankYear is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRankYear requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRankYear: %w", err)
	}
	return oldValue.RankYear, nil
}

// AddRankYear adds i to the "rank_year" field.
func (m *TGoNFTMutation) AddRankYear(i int) {
	if m.addrank_year != nil {
		*m.addrank_year += i
	} else {
		m.addrank_year = &i
	}
}

// AddedRankYear returns the value that was added to the "rank_year" field in this mutation.
func (m *TGoNFTMutation) AddedRankYear() (r int, exists bool) {
	v := m.addrank_year
	if v == nil {
		return
	}
	return *v, true
}

// ResetRankYear resets all changes to the "rank_year" field.
func (m *TGoNFTMutation) ResetRankYear() {
	m.rank_year = nil
	m.addrank_year = nil
}

// SetRankSeason sets the "rank_season" field.
func (m *TGoNFTMutation) SetRankSeason(i int) {
	m.rank_season = &i
	m.addrank_season = nil
}

// RankSeason returns the value of the "rank_season" field in the mutation.
func (m *TGoNFTMutation) RankSeason() (r int, exists bool) {
	v := m.rank_season
	if v == nil {
		return
	}
	return *v, true
}

// OldRankSeason returns the old "rank_season" field's value of the TGoNFT entity.
// If the TGoNFT object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TGoNFTMutation) OldRankSeason(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRankSeason is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRankSeason requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRankSeason: %w", err)
	}
	return oldValue.RankSeason, nil
}

// AddRankSeason adds i to the "rank_season" field.
func (m *TGoNFTMutation) AddRankSeason(i int) {
	if m.addrank_season != nil {
		*m.addrank_season += i
	} else {
		m.addrank_season = &i
	}
}

// AddedRankSeason returns the value that was added to the "rank_season" field in this mutation.
func (m *TGoNFTMutation) AddedRankSeason() (r int, exists bool) {
	v := m.addrank_season
	if v == nil {
		return
	}
	return *v, true
}

// ResetRankSeason resets all changes to the "rank_season" field.
func (m *TGoNFTMutation) ResetRankSeason() {
	m.rank_season = nil
	m.addrank_season = nil
}

// SetRank sets the "rank" field.
func (m *TGoNFTMutation) SetRank(i int) {
	m.rank = &i
	m.addrank = nil
}

// Rank returns the value of the "rank" field in the mutation.
func (m *TGoNFTMutation) Rank() (r int, exists bool) {
	v := m.rank
	if v == nil {
		return
	}
	return *v, true
}

// OldRank returns the old "rank" field's value of the TGoNFT entity.
// If the TGoNFT object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TGoNFTMutation) OldRank(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRank is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRank requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRank: %w", err)
	}
	return oldValue.Rank, nil
}

// AddRank adds i to the "rank" field.
func (m *TGoNFTMutation) AddRank(i int) {
	if m.addrank != nil {
		*m.addrank += i
	} else {
		m.addrank = &i
	}
}

// AddedRank returns the value that was added to the "rank" field in this mutation.
func (m *TGoNFTMutation) AddedRank() (r int, exists bool) {
	v := m.addrank
	if v == nil {
		return
	}
	return *v, true
}

// ResetRank resets all changes to the "rank" field.
func (m *TGoNFTMutation) ResetRank() {
	m.rank = nil
	m.addrank = nil
}

// SetMintTx sets the "mint_tx" field.
func (m *TGoNFTMutation) SetMintTx(s string) {
	m.mint_tx = &s
}

// MintTx returns the value of the "mint_tx" field in the mutation.
func (m *TGoNFTMutation) MintTx() (r string, exists bool) {
	v := m.mint_tx
	if v == nil {
		return
	}
	return *v, true
}

// OldMintTx returns the old "mint_tx" field's value of the TGoNFT entity.
// If the TGoNFT object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TGoNFTMutation) OldMintTx(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMintTx is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMintTx requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMintTx: %w", err)
	}
	return oldValue.MintTx, nil
}

// ResetMintTx resets all changes to the "mint_tx" field.
func (m *TGoNFTMutation) ResetMintTx() {
	m.mint_tx = nil
}

// SetMtime sets the "mtime" field.
func (m *TGoNFTMutation) SetMtime(t time.Time) {
	m.mtime = &t
}

// Mtime returns the value of the "mtime" field in the mutation.
func (m *TGoNFTMutation) Mtime() (r time.Time, exists bool) {
	v := m.mtime
	if v == nil {
		return
	}
	return *v, true
}

// OldMtime returns the old "mtime" field's value of the TGoNFT entity.
// If the TGoNFT object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TGoNFTMutation) OldMtime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMtime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMtime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMtime: %w", err)
	}
	return oldValue.Mtime, nil
}

// ResetMtime resets all changes to the "mtime" field.
func (m *TGoNFTMutation) ResetMtime() {
	m.mtime = nil
}

// SetCtime sets the "ctime" field.
func (m *TGoNFTMutation) SetCtime(t time.Time) {
	m.ctime = &t
}

// Ctime returns the value of the "ctime" field in the mutation.
func (m *TGoNFTMutation) Ctime() (r time.Time, exists bool) {
	v := m.ctime
	if v == nil {
		return
	}
	return *v, true
}

// OldCtime returns the old "ctime" field's value of the TGoNFT entity.
// If the TGoNFT object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TGoNFTMutation) OldCtime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCtime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCtime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCtime: %w", err)
	}
	return oldValue.Ctime, nil
}

// ResetCtime resets all changes to the "ctime" field.
func (m *TGoNFTMutation) ResetCtime() {
	m.ctime = nil
}

// Where appends a list predicates to the TGoNFTMutation builder.
func (m *TGoNFTMutation) Where(ps ...predicate.TGoNFT) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TGoNFTMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TGoNFT).
func (m *TGoNFTMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TGoNFTMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.wallet_pub != nil {
		fields = append(fields, tgonft.FieldWalletPub)
	}
	if m.rank_type != nil {
		fields = append(fields, tgonft.FieldRankType)
	}
	if m.rank_year != nil {
		fields = append(fields, tgonft.FieldRankYear)
	}
	if m.rank_season != nil {
		fields = append(fields, tgonft.FieldRankSeason)
	}
	if m.rank != nil {
		fields = append(fields, tgonft.FieldRank)
	}
	if m.mint_tx != nil {
		fields = append(fields, tgonft.FieldMintTx)
	}
	if m.mtime != nil {
		fields = append(fields, tgonft.FieldMtime)
	}
	if m.ctime != nil {
		fields = append(fields, tgonft.FieldCtime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TGoNFTMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tgonft.FieldWalletPub:
		return m.WalletPub()
	case tgonft.FieldRankType:
		return m.RankType()
	case tgonft.FieldRankYear:
		return m.RankYear()
	case tgonft.FieldRankSeason:
		return m.RankSeason()
	case tgonft.FieldRank:
		return m.Rank()
	case tgonft.FieldMintTx:
		return m.MintTx()
	case tgonft.FieldMtime:
		return m.Mtime()
	case tgonft.FieldCtime:
		return m.Ctime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TGoNFTMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tgonft.FieldWalletPub:
		return m.OldWalletPub(ctx)
	case tgonft.FieldRankType:
		return m.OldRankType(ctx)
	case tgonft.FieldRankYear:
		return m.OldRankYear(ctx)
	case tgonft.FieldRankSeason:
		return m.OldRankSeason(ctx)
	case tgonft.FieldRank:
		return m.OldRank(ctx)
	case tgonft.FieldMintTx:
		return m.OldMintTx(ctx)
	case tgonft.FieldMtime:
		return m.OldMtime(ctx)
	case tgonft.FieldCtime:
		return m.OldCtime(ctx)
	}
	return nil, fmt.Errorf("unknown TGoNFT field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TGoNFTMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tgonft.FieldWalletPub:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWalletPub(v)
		return nil
	case tgonft.FieldRankType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRankType(v)
		return nil
	case tgonft.FieldRankYear:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRankYear(v)
		return nil
	case tgonft.FieldRankSeason:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRankSeason(v)
		return nil
	case tgonft.FieldRank:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRank(v)
		return nil
	case tgonft.FieldMintTx:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMintTx(v)
		return nil
	case tgonft.FieldMtime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMtime(v)
		return nil
	case tgonft.FieldCtime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCtime(v)
		return nil
	}
	return fmt.Errorf("unknown TGoNFT field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TGoNFTMutation) AddedFields() []string {
	var fields []string
	if m.addrank_type != nil {
		fields = append(fields, tgonft.FieldRankType)
	}
	if m.addrank_year != nil {
		fields = append(fields, tgonft.FieldRankYear)
	}
	if m.addrank_season != nil {
		fields = append(fields, tgonft.FieldRankSeason)
	}
	if m.addrank != nil {
		fields = append(fields, tgonft.FieldRank)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TGoNFTMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case tgonft.FieldRankType:
		return m.AddedRankType()
	case tgonft.FieldRankYear:
		return m.AddedRankYear()
	case tgonft.FieldRankSeason:
		return m.AddedRankSeason()
	case tgonft.FieldRank:
		return m.AddedRank()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TGoNFTMutation) AddField(name string, value ent.Value) error {
	switch name {
	case tgonft.FieldRankType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRankType(v)
		return nil
	case tgonft.FieldRankYear:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRankYear(v)
		return nil
	case tgonft.FieldRankSeason:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRankSeason(v)
		return nil
	case tgonft.FieldRank:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRank(v)
		return nil
	}
	return fmt.Errorf("unknown TGoNFT numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TGoNFTMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TGoNFTMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TGoNFTMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TGoNFT nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TGoNFTMutation) ResetField(name string) error {
	switch name {
	case tgonft.FieldWalletPub:
		m.ResetWalletPub()
		return nil
	case tgonft.FieldRankType:
		m.ResetRankType()
		return nil
	case tgonft.FieldRankYear:
		m.ResetRankYear()
		return nil
	case tgonft.FieldRankSeason:
		m.ResetRankSeason()
		return nil
	case tgonft.FieldRank:
		m.ResetRank()
		return nil
	case tgonft.FieldMintTx:
		m.ResetMintTx()
		return nil
	case tgonft.FieldMtime:
		m.ResetMtime()
		return nil
	case tgonft.FieldCtime:
		m.ResetCtime()
		return nil
	}
	return fmt.Errorf("unknown TGoNFT field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TGoNFTMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TGoNFTMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TGoNFTMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TGoNFTMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TGoNFTMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TGoNFTMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TGoNFTMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TGoNFT unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TGoNFTMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TGoNFT edge %s", name)
}

// TGoRetirementMutation represents an operation that mutates the TGoRetirement nodes in the graph.
type TGoRetirementMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uint64
	creation_tx         *string
	creator_address     *string
	beneficiary_address *string
	amount              *float64
	addamount           *float64
	token_address       *string
	token_name          *string
	token_type          *string
	retirement_message  *string
	retirement_time     *time.Time
	mtime               *time.Time
	ctime               *time.Time
	clearedFields       map[string]struct{}
	done                bool
	oldValue            func(context.Context) (*TGoRetirement, error)
	predicates          []predicate.TGoRetirement
}

var _ ent.Mutation = (*TGoRetirementMutation)(nil)

// tgoretirementOption allows management of the mutation configuration using functional options.
type tgoretirementOption func(*TGoRetirementMutation)

// newTGoRetirementMutation creates new mutation for the TGoRetirement entity.
func newTGoRetirementMutation(c config, op Op, opts ...tgoretirementOption) *TGoRetirementMutation {
	m := &TGoRetirementMutation{
		config:        c,
		op:            op,
		typ:           TypeTGoRetirement,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTGoRetirementID sets the ID field of the mutation.
func withTGoRetirementID(id uint64) tgoretirementOption {
	return func(m *TGoRetirementMutation) {
		var (
			err   error
			once  sync.Once
			value *TGoRetirement
		)
		m.oldValue = func(ctx context.Context) (*TGoRetirement, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TGoRetirement.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTGoRetirement sets the old TGoRetirement of the mutation.
func withTGoRetirement(node *TGoRetirement) tgoretirementOption {
	return func(m *TGoRetirementMutation) {
		m.oldValue = func(context.Context) (*TGoRetirement, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TGoRetirementMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TGoRetirementMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TGoRetirement entities.
func (m *TGoRetirementMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TGoRetirementMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TGoRetirementMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TGoRetirement.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreationTx sets the "creation_tx" field.
func (m *TGoRetirementMutation) SetCreationTx(s string) {
	m.creation_tx = &s
}

// CreationTx returns the value of the "creation_tx" field in the mutation.
func (m *TGoRetirementMutation) CreationTx() (r string, exists bool) {
	v := m.creation_tx
	if v == nil {
		return
	}
	return *v, true
}

// OldCreationTx returns the old "creation_tx" field's value of the TGoRetirement entity.
// If the TGoRetirement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TGoRetirementMutation) OldCreationTx(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreationTx is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreationTx requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreationTx: %w", err)
	}
	return oldValue.CreationTx, nil
}

// ResetCreationTx resets all changes to the "creation_tx" field.
func (m *TGoRetirementMutation) ResetCreationTx() {
	m.creation_tx = nil
}

// SetCreatorAddress sets the "creator_address" field.
func (m *TGoRetirementMutation) SetCreatorAddress(s string) {
	m.creator_address = &s
}

// CreatorAddress returns the value of the "creator_address" field in the mutation.
func (m *TGoRetirementMutation) CreatorAddress() (r string, exists bool) {
	v := m.creator_address
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatorAddress returns the old "creator_address" field's value of the TGoRetirement entity.
// If the TGoRetirement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TGoRetirementMutation) OldCreatorAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatorAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatorAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatorAddress: %w", err)
	}
	return oldValue.CreatorAddress, nil
}

// ResetCreatorAddress resets all changes to the "creator_address" field.
func (m *TGoRetirementMutation) ResetCreatorAddress() {
	m.creator_address = nil
}

// SetBeneficiaryAddress sets the "beneficiary_address" field.
func (m *TGoRetirementMutation) SetBeneficiaryAddress(s string) {
	m.beneficiary_address = &s
}

// BeneficiaryAddress returns the value of the "beneficiary_address" field in the mutation.
func (m *TGoRetirementMutation) BeneficiaryAddress() (r string, exists bool) {
	v := m.beneficiary_address
	if v == nil {
		return
	}
	return *v, true
}

// OldBeneficiaryAddress returns the old "beneficiary_address" field's value of the TGoRetirement entity.
// If the TGoRetirement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TGoRetirementMutation) OldBeneficiaryAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBeneficiaryAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBeneficiaryAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBeneficiaryAddress: %w", err)
	}
	return oldValue.BeneficiaryAddress, nil
}

// ResetBeneficiaryAddress resets all changes to the "beneficiary_address" field.
func (m *TGoRetirementMutation) ResetBeneficiaryAddress() {
	m.beneficiary_address = nil
}

// SetAmount sets the "amount" field.
func (m *TGoRetirementMutation) SetAmount(f float64) {
	m.amount = &f
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *TGoRetirementMutation) Amount() (r float64, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the TGoRetirement entity.
// If the TGoRetirement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TGoRetirementMutation) OldAmount(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds f to the "amount" field.
func (m *TGoRetirementMutation) AddAmount(f float64) {
	if m.addamount != nil {
		*m.addamount += f
	} else {
		m.addamount = &f
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *TGoRetirementMutation) AddedAmount() (r float64, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmount resets all changes to the "amount" field.
func (m *TGoRetirementMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
}

// SetTokenAddress sets the "token_address" field.
func (m *TGoRetirementMutation) SetTokenAddress(s string) {
	m.token_address = &s
}

// TokenAddress returns the value of the "token_address" field in the mutation.
func (m *TGoRetirementMutation) TokenAddress() (r string, exists bool) {
	v := m.token_address
	if v == nil {
		return
	}
	return *v, true
}

// OldTokenAddress returns the old "token_address" field's value of the TGoRetirement entity.
// If the TGoRetirement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TGoRetirementMutation) OldTokenAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTokenAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTokenAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTokenAddress: %w", err)
	}
	return oldValue.TokenAddress, nil
}

// ResetTokenAddress resets all changes to the "token_address" field.
func (m *TGoRetirementMutation) ResetTokenAddress() {
	m.token_address = nil
}

// SetTokenName sets the "token_name" field.
func (m *TGoRetirementMutation) SetTokenName(s string) {
	m.token_name = &s
}

// TokenName returns the value of the "token_name" field in the mutation.
func (m *TGoRetirementMutation) TokenName() (r string, exists bool) {
	v := m.token_name
	if v == nil {
		return
	}
	return *v, true
}

// OldTokenName returns the old "token_name" field's value of the TGoRetirement entity.
// If the TGoRetirement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TGoRetirementMutation) OldTokenName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTokenName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTokenName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTokenName: %w", err)
	}
	return oldValue.TokenName, nil
}

// ResetTokenName resets all changes to the "token_name" field.
func (m *TGoRetirementMutation) ResetTokenName() {
	m.token_name = nil
}

// SetTokenType sets the "token_type" field.
func (m *TGoRetirementMutation) SetTokenType(s string) {
	m.token_type = &s
}

// TokenType returns the value of the "token_type" field in the mutation.
func (m *TGoRetirementMutation) TokenType() (r string, exists bool) {
	v := m.token_type
	if v == nil {
		return
	}
	return *v, true
}

// OldTokenType returns the old "token_type" field's value of the TGoRetirement entity.
// If the TGoRetirement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TGoRetirementMutation) OldTokenType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTokenType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTokenType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTokenType: %w", err)
	}
	return oldValue.TokenType, nil
}

// ResetTokenType resets all changes to the "token_type" field.
func (m *TGoRetirementMutation) ResetTokenType() {
	m.token_type = nil
}

// SetRetirementMessage sets the "retirement_message" field.
func (m *TGoRetirementMutation) SetRetirementMessage(s string) {
	m.retirement_message = &s
}

// RetirementMessage returns the value of the "retirement_message" field in the mutation.
func (m *TGoRetirementMutation) RetirementMessage() (r string, exists bool) {
	v := m.retirement_message
	if v == nil {
		return
	}
	return *v, true
}

// OldRetirementMessage returns the old "retirement_message" field's value of the TGoRetirement entity.
// If the TGoRetirement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TGoRetirementMutation) OldRetirementMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRetirementMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRetirementMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRetirementMessage: %w", err)
	}
	return oldValue.RetirementMessage, nil
}

// ResetRetirementMessage resets all changes to the "retirement_message" field.
func (m *TGoRetirementMutation) ResetRetirementMessage() {
	m.retirement_message = nil
}

// SetRetirementTime sets the "retirement_time" field.
func (m *TGoRetirementMutation) SetRetirementTime(t time.Time) {
	m.retirement_time = &t
}

// RetirementTime returns the value of the "retirement_time" field in the mutation.
func (m *TGoRetirementMutation) RetirementTime() (r time.Time, exists bool) {
	v := m.retirement_time
	if v == nil {
		return
	}
	return *v, true
}

// OldRetirementTime returns the old "retirement_time" field's value of the TGoRetirement entity.
// If the TGoRetirement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TGoRetirementMutation) OldRetirementTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRetirementTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRetirementTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRetirementTime: %w", err)
	}
	return oldValue.RetirementTime, nil
}

// ResetRetirementTime resets all changes to the "retirement_time" field.
func (m *TGoRetirementMutation) ResetRetirementTime() {
	m.retirement_time = nil
}

// SetMtime sets the "mtime" field.
func (m *TGoRetirementMutation) SetMtime(t time.Time) {
	m.mtime = &t
}

// Mtime returns the value of the "mtime" field in the mutation.
func (m *TGoRetirementMutation) Mtime() (r time.Time, exists bool) {
	v := m.mtime
	if v == nil {
		return
	}
	return *v, true
}

// OldMtime returns the old "mtime" field's value of the TGoRetirement entity.
// If the TGoRetirement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TGoRetirementMutation) OldMtime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMtime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMtime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMtime: %w", err)
	}
	return oldValue.Mtime, nil
}

// ResetMtime resets all changes to the "mtime" field.
func (m *TGoRetirementMutation) ResetMtime() {
	m.mtime = nil
}

// SetCtime sets the "ctime" field.
func (m *TGoRetirementMutation) SetCtime(t time.Time) {
	m.ctime = &t
}

// Ctime returns the value of the "ctime" field in the mutation.
func (m *TGoRetirementMutation) Ctime() (r time.Time, exists bool) {
	v := m.ctime
	if v == nil {
		return
	}
	return *v, true
}

// OldCtime returns the old "ctime" field's value of the TGoRetirement entity.
// If the TGoRetirement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TGoRetirementMutation) OldCtime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCtime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCtime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCtime: %w", err)
	}
	return oldValue.Ctime, nil
}

// ResetCtime resets all changes to the "ctime" field.
func (m *TGoRetirementMutation) ResetCtime() {
	m.ctime = nil
}

// Where appends a list predicates to the TGoRetirementMutation builder.
func (m *TGoRetirementMutation) Where(ps ...predicate.TGoRetirement) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TGoRetirementMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TGoRetirement).
func (m *TGoRetirementMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TGoRetirementMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.creation_tx != nil {
		fields = append(fields, tgoretirement.FieldCreationTx)
	}
	if m.creator_address != nil {
		fields = append(fields, tgoretirement.FieldCreatorAddress)
	}
	if m.beneficiary_address != nil {
		fields = append(fields, tgoretirement.FieldBeneficiaryAddress)
	}
	if m.amount != nil {
		fields = append(fields, tgoretirement.FieldAmount)
	}
	if m.token_address != nil {
		fields = append(fields, tgoretirement.FieldTokenAddress)
	}
	if m.token_name != nil {
		fields = append(fields, tgoretirement.FieldTokenName)
	}
	if m.token_type != nil {
		fields = append(fields, tgoretirement.FieldTokenType)
	}
	if m.retirement_message != nil {
		fields = append(fields, tgoretirement.FieldRetirementMessage)
	}
	if m.retirement_time != nil {
		fields = append(fields, tgoretirement.FieldRetirementTime)
	}
	if m.mtime != nil {
		fields = append(fields, tgoretirement.FieldMtime)
	}
	if m.ctime != nil {
		fields = append(fields, tgoretirement.FieldCtime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TGoRetirementMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tgoretirement.FieldCreationTx:
		return m.CreationTx()
	case tgoretirement.FieldCreatorAddress:
		return m.CreatorAddress()
	case tgoretirement.FieldBeneficiaryAddress:
		return m.BeneficiaryAddress()
	case tgoretirement.FieldAmount:
		return m.Amount()
	case tgoretirement.FieldTokenAddress:
		return m.TokenAddress()
	case tgoretirement.FieldTokenName:
		return m.TokenName()
	case tgoretirement.FieldTokenType:
		return m.TokenType()
	case tgoretirement.FieldRetirementMessage:
		return m.RetirementMessage()
	case tgoretirement.FieldRetirementTime:
		return m.RetirementTime()
	case tgoretirement.FieldMtime:
		return m.Mtime()
	case tgoretirement.FieldCtime:
		return m.Ctime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TGoRetirementMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tgoretirement.FieldCreationTx:
		return m.OldCreationTx(ctx)
	case tgoretirement.FieldCreatorAddress:
		return m.OldCreatorAddress(ctx)
	case tgoretirement.FieldBeneficiaryAddress:
		return m.OldBeneficiaryAddress(ctx)
	case tgoretirement.FieldAmount:
		return m.OldAmount(ctx)
	case tgoretirement.FieldTokenAddress:
		return m.OldTokenAddress(ctx)
	case tgoretirement.FieldTokenName:
		return m.OldTokenName(ctx)
	case tgoretirement.FieldTokenType:
		return m.OldTokenType(ctx)
	case tgoretirement.FieldRetirementMessage:
		return m.OldRetirementMessage(ctx)
	case tgoretirement.FieldRetirementTime:
		return m.OldRetirementTime(ctx)
	case tgoretirement.FieldMtime:
		return m.OldMtime(ctx)
	case tgoretirement.FieldCtime:
		return m.OldCtime(ctx)
	}
	return nil, fmt.Errorf("unknown TGoRetirement field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TGoRetirementMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tgoretirement.FieldCreationTx:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreationTx(v)
		return nil
	case tgoretirement.FieldCreatorAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatorAddress(v)
		return nil
	case tgoretirement.FieldBeneficiaryAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBeneficiaryAddress(v)
		return nil
	case tgoretirement.FieldAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case tgoretirement.FieldTokenAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTokenAddress(v)
		return nil
	case tgoretirement.FieldTokenName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTokenName(v)
		return nil
	case tgoretirement.FieldTokenType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTokenType(v)
		return nil
	case tgoretirement.FieldRetirementMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRetirementMessage(v)
		return nil
	case tgoretirement.FieldRetirementTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRetirementTime(v)
		return nil
	case tgoretirement.FieldMtime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMtime(v)
		return nil
	case tgoretirement.FieldCtime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCtime(v)
		return nil
	}
	return fmt.Errorf("unknown TGoRetirement field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TGoRetirementMutation) AddedFields() []string {
	var fields []string
	if m.addamount != nil {
		fields = append(fields, tgoretirement.FieldAmount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TGoRetirementMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case tgoretirement.FieldAmount:
		return m.AddedAmount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TGoRetirementMutation) AddField(name string, value ent.Value) error {
	switch name {
	case tgoretirement.FieldAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	}
	return fmt.Errorf("unknown TGoRetirement numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TGoRetirementMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TGoRetirementMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TGoRetirementMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TGoRetirement nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TGoRetirementMutation) ResetField(name string) error {
	switch name {
	case tgoretirement.FieldCreationTx:
		m.ResetCreationTx()
		return nil
	case tgoretirement.FieldCreatorAddress:
		m.ResetCreatorAddress()
		return nil
	case tgoretirement.FieldBeneficiaryAddress:
		m.ResetBeneficiaryAddress()
		return nil
	case tgoretirement.FieldAmount:
		m.ResetAmount()
		return nil
	case tgoretirement.FieldTokenAddress:
		m.ResetTokenAddress()
		return nil
	case tgoretirement.FieldTokenName:
		m.ResetTokenName()
		return nil
	case tgoretirement.FieldTokenType:
		m.ResetTokenType()
		return nil
	case tgoretirement.FieldRetirementMessage:
		m.ResetRetirementMessage()
		return nil
	case tgoretirement.FieldRetirementTime:
		m.ResetRetirementTime()
		return nil
	case tgoretirement.FieldMtime:
		m.ResetMtime()
		return nil
	case tgoretirement.FieldCtime:
		m.ResetCtime()
		return nil
	}
	return fmt.Errorf("unknown TGoRetirement field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TGoRetirementMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TGoRetirementMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TGoRetirementMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TGoRetirementMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TGoRetirementMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TGoRetirementMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TGoRetirementMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TGoRetirement unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TGoRetirementMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TGoRetirement edge %s", name)
}

// TUserMutation represents an operation that mutates the TUser nodes in the graph.
type TUserMutation struct {
	config
	op              Op
	typ             string
	id              *uint64
	wallet_pub      *string
	wallet_type     *string
	uname           *string
	face            *string
	gender          *bool
	twitter         *string
	email           *string
	about           *string
	last_login_time *time.Time
	mtime           *time.Time
	ctime           *time.Time
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*TUser, error)
	predicates      []predicate.TUser
}

var _ ent.Mutation = (*TUserMutation)(nil)

// tuserOption allows management of the mutation configuration using functional options.
type tuserOption func(*TUserMutation)

// newTUserMutation creates new mutation for the TUser entity.
func newTUserMutation(c config, op Op, opts ...tuserOption) *TUserMutation {
	m := &TUserMutation{
		config:        c,
		op:            op,
		typ:           TypeTUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTUserID sets the ID field of the mutation.
func withTUserID(id uint64) tuserOption {
	return func(m *TUserMutation) {
		var (
			err   error
			once  sync.Once
			value *TUser
		)
		m.oldValue = func(ctx context.Context) (*TUser, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TUser.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTUser sets the old TUser of the mutation.
func withTUser(node *TUser) tuserOption {
	return func(m *TUserMutation) {
		m.oldValue = func(context.Context) (*TUser, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TUserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TUserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TUser entities.
func (m *TUserMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TUserMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TUserMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TUser.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetWalletPub sets the "wallet_pub" field.
func (m *TUserMutation) SetWalletPub(s string) {
	m.wallet_pub = &s
}

// WalletPub returns the value of the "wallet_pub" field in the mutation.
func (m *TUserMutation) WalletPub() (r string, exists bool) {
	v := m.wallet_pub
	if v == nil {
		return
	}
	return *v, true
}

// OldWalletPub returns the old "wallet_pub" field's value of the TUser entity.
// If the TUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TUserMutation) OldWalletPub(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWalletPub is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWalletPub requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWalletPub: %w", err)
	}
	return oldValue.WalletPub, nil
}

// ResetWalletPub resets all changes to the "wallet_pub" field.
func (m *TUserMutation) ResetWalletPub() {
	m.wallet_pub = nil
}

// SetWalletType sets the "wallet_type" field.
func (m *TUserMutation) SetWalletType(s string) {
	m.wallet_type = &s
}

// WalletType returns the value of the "wallet_type" field in the mutation.
func (m *TUserMutation) WalletType() (r string, exists bool) {
	v := m.wallet_type
	if v == nil {
		return
	}
	return *v, true
}

// OldWalletType returns the old "wallet_type" field's value of the TUser entity.
// If the TUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TUserMutation) OldWalletType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWalletType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWalletType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWalletType: %w", err)
	}
	return oldValue.WalletType, nil
}

// ResetWalletType resets all changes to the "wallet_type" field.
func (m *TUserMutation) ResetWalletType() {
	m.wallet_type = nil
}

// SetUname sets the "uname" field.
func (m *TUserMutation) SetUname(s string) {
	m.uname = &s
}

// Uname returns the value of the "uname" field in the mutation.
func (m *TUserMutation) Uname() (r string, exists bool) {
	v := m.uname
	if v == nil {
		return
	}
	return *v, true
}

// OldUname returns the old "uname" field's value of the TUser entity.
// If the TUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TUserMutation) OldUname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUname: %w", err)
	}
	return oldValue.Uname, nil
}

// ResetUname resets all changes to the "uname" field.
func (m *TUserMutation) ResetUname() {
	m.uname = nil
}

// SetFace sets the "face" field.
func (m *TUserMutation) SetFace(s string) {
	m.face = &s
}

// Face returns the value of the "face" field in the mutation.
func (m *TUserMutation) Face() (r string, exists bool) {
	v := m.face
	if v == nil {
		return
	}
	return *v, true
}

// OldFace returns the old "face" field's value of the TUser entity.
// If the TUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TUserMutation) OldFace(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFace is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFace requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFace: %w", err)
	}
	return oldValue.Face, nil
}

// ResetFace resets all changes to the "face" field.
func (m *TUserMutation) ResetFace() {
	m.face = nil
}

// SetGender sets the "gender" field.
func (m *TUserMutation) SetGender(b bool) {
	m.gender = &b
}

// Gender returns the value of the "gender" field in the mutation.
func (m *TUserMutation) Gender() (r bool, exists bool) {
	v := m.gender
	if v == nil {
		return
	}
	return *v, true
}

// OldGender returns the old "gender" field's value of the TUser entity.
// If the TUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TUserMutation) OldGender(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGender is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGender: %w", err)
	}
	return oldValue.Gender, nil
}

// ResetGender resets all changes to the "gender" field.
func (m *TUserMutation) ResetGender() {
	m.gender = nil
}

// SetTwitter sets the "twitter" field.
func (m *TUserMutation) SetTwitter(s string) {
	m.twitter = &s
}

// Twitter returns the value of the "twitter" field in the mutation.
func (m *TUserMutation) Twitter() (r string, exists bool) {
	v := m.twitter
	if v == nil {
		return
	}
	return *v, true
}

// OldTwitter returns the old "twitter" field's value of the TUser entity.
// If the TUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TUserMutation) OldTwitter(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTwitter is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTwitter requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTwitter: %w", err)
	}
	return oldValue.Twitter, nil
}

// ResetTwitter resets all changes to the "twitter" field.
func (m *TUserMutation) ResetTwitter() {
	m.twitter = nil
}

// SetEmail sets the "email" field.
func (m *TUserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *TUserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the TUser entity.
// If the TUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TUserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *TUserMutation) ResetEmail() {
	m.email = nil
}

// SetAbout sets the "about" field.
func (m *TUserMutation) SetAbout(s string) {
	m.about = &s
}

// About returns the value of the "about" field in the mutation.
func (m *TUserMutation) About() (r string, exists bool) {
	v := m.about
	if v == nil {
		return
	}
	return *v, true
}

// OldAbout returns the old "about" field's value of the TUser entity.
// If the TUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TUserMutation) OldAbout(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAbout is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAbout requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAbout: %w", err)
	}
	return oldValue.About, nil
}

// ResetAbout resets all changes to the "about" field.
func (m *TUserMutation) ResetAbout() {
	m.about = nil
}

// SetLastLoginTime sets the "last_login_time" field.
func (m *TUserMutation) SetLastLoginTime(t time.Time) {
	m.last_login_time = &t
}

// LastLoginTime returns the value of the "last_login_time" field in the mutation.
func (m *TUserMutation) LastLoginTime() (r time.Time, exists bool) {
	v := m.last_login_time
	if v == nil {
		return
	}
	return *v, true
}

// OldLastLoginTime returns the old "last_login_time" field's value of the TUser entity.
// If the TUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TUserMutation) OldLastLoginTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastLoginTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastLoginTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastLoginTime: %w", err)
	}
	return oldValue.LastLoginTime, nil
}

// ResetLastLoginTime resets all changes to the "last_login_time" field.
func (m *TUserMutation) ResetLastLoginTime() {
	m.last_login_time = nil
}

// SetMtime sets the "mtime" field.
func (m *TUserMutation) SetMtime(t time.Time) {
	m.mtime = &t
}

// Mtime returns the value of the "mtime" field in the mutation.
func (m *TUserMutation) Mtime() (r time.Time, exists bool) {
	v := m.mtime
	if v == nil {
		return
	}
	return *v, true
}

// OldMtime returns the old "mtime" field's value of the TUser entity.
// If the TUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TUserMutation) OldMtime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMtime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMtime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMtime: %w", err)
	}
	return oldValue.Mtime, nil
}

// ResetMtime resets all changes to the "mtime" field.
func (m *TUserMutation) ResetMtime() {
	m.mtime = nil
}

// SetCtime sets the "ctime" field.
func (m *TUserMutation) SetCtime(t time.Time) {
	m.ctime = &t
}

// Ctime returns the value of the "ctime" field in the mutation.
func (m *TUserMutation) Ctime() (r time.Time, exists bool) {
	v := m.ctime
	if v == nil {
		return
	}
	return *v, true
}

// OldCtime returns the old "ctime" field's value of the TUser entity.
// If the TUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TUserMutation) OldCtime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCtime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCtime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCtime: %w", err)
	}
	return oldValue.Ctime, nil
}

// ResetCtime resets all changes to the "ctime" field.
func (m *TUserMutation) ResetCtime() {
	m.ctime = nil
}

// Where appends a list predicates to the TUserMutation builder.
func (m *TUserMutation) Where(ps ...predicate.TUser) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TUserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TUser).
func (m *TUserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TUserMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.wallet_pub != nil {
		fields = append(fields, tuser.FieldWalletPub)
	}
	if m.wallet_type != nil {
		fields = append(fields, tuser.FieldWalletType)
	}
	if m.uname != nil {
		fields = append(fields, tuser.FieldUname)
	}
	if m.face != nil {
		fields = append(fields, tuser.FieldFace)
	}
	if m.gender != nil {
		fields = append(fields, tuser.FieldGender)
	}
	if m.twitter != nil {
		fields = append(fields, tuser.FieldTwitter)
	}
	if m.email != nil {
		fields = append(fields, tuser.FieldEmail)
	}
	if m.about != nil {
		fields = append(fields, tuser.FieldAbout)
	}
	if m.last_login_time != nil {
		fields = append(fields, tuser.FieldLastLoginTime)
	}
	if m.mtime != nil {
		fields = append(fields, tuser.FieldMtime)
	}
	if m.ctime != nil {
		fields = append(fields, tuser.FieldCtime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TUserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tuser.FieldWalletPub:
		return m.WalletPub()
	case tuser.FieldWalletType:
		return m.WalletType()
	case tuser.FieldUname:
		return m.Uname()
	case tuser.FieldFace:
		return m.Face()
	case tuser.FieldGender:
		return m.Gender()
	case tuser.FieldTwitter:
		return m.Twitter()
	case tuser.FieldEmail:
		return m.Email()
	case tuser.FieldAbout:
		return m.About()
	case tuser.FieldLastLoginTime:
		return m.LastLoginTime()
	case tuser.FieldMtime:
		return m.Mtime()
	case tuser.FieldCtime:
		return m.Ctime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TUserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tuser.FieldWalletPub:
		return m.OldWalletPub(ctx)
	case tuser.FieldWalletType:
		return m.OldWalletType(ctx)
	case tuser.FieldUname:
		return m.OldUname(ctx)
	case tuser.FieldFace:
		return m.OldFace(ctx)
	case tuser.FieldGender:
		return m.OldGender(ctx)
	case tuser.FieldTwitter:
		return m.OldTwitter(ctx)
	case tuser.FieldEmail:
		return m.OldEmail(ctx)
	case tuser.FieldAbout:
		return m.OldAbout(ctx)
	case tuser.FieldLastLoginTime:
		return m.OldLastLoginTime(ctx)
	case tuser.FieldMtime:
		return m.OldMtime(ctx)
	case tuser.FieldCtime:
		return m.OldCtime(ctx)
	}
	return nil, fmt.Errorf("unknown TUser field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TUserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tuser.FieldWalletPub:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWalletPub(v)
		return nil
	case tuser.FieldWalletType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWalletType(v)
		return nil
	case tuser.FieldUname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUname(v)
		return nil
	case tuser.FieldFace:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFace(v)
		return nil
	case tuser.FieldGender:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGender(v)
		return nil
	case tuser.FieldTwitter:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTwitter(v)
		return nil
	case tuser.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case tuser.FieldAbout:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAbout(v)
		return nil
	case tuser.FieldLastLoginTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastLoginTime(v)
		return nil
	case tuser.FieldMtime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMtime(v)
		return nil
	case tuser.FieldCtime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCtime(v)
		return nil
	}
	return fmt.Errorf("unknown TUser field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TUserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TUserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TUserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TUser numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TUserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TUserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TUserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TUser nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TUserMutation) ResetField(name string) error {
	switch name {
	case tuser.FieldWalletPub:
		m.ResetWalletPub()
		return nil
	case tuser.FieldWalletType:
		m.ResetWalletType()
		return nil
	case tuser.FieldUname:
		m.ResetUname()
		return nil
	case tuser.FieldFace:
		m.ResetFace()
		return nil
	case tuser.FieldGender:
		m.ResetGender()
		return nil
	case tuser.FieldTwitter:
		m.ResetTwitter()
		return nil
	case tuser.FieldEmail:
		m.ResetEmail()
		return nil
	case tuser.FieldAbout:
		m.ResetAbout()
		return nil
	case tuser.FieldLastLoginTime:
		m.ResetLastLoginTime()
		return nil
	case tuser.FieldMtime:
		m.ResetMtime()
		return nil
	case tuser.FieldCtime:
		m.ResetCtime()
		return nil
	}
	return fmt.Errorf("unknown TUser field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TUserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TUserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TUserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TUserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TUserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TUserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TUserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TUser unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TUserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TUser edge %s", name)
}
