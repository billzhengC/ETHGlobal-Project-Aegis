// Code generated by ent, DO NOT EDIT.

package ent

import (
	"aegis/ent/tuser"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// TUser is the model entity for the TUser schema.
type TUser struct {
	config `json:"-"`
	// ID of the ent.
	// auto increment primary key
	ID uint64 `json:"id,omitempty"`
	// wallet public key
	WalletPub string `json:"wallet_pub,omitempty"`
	// wallet type phantom
	WalletType string `json:"wallet_type,omitempty"`
	// name
	Uname string `json:"uname,omitempty"`
	// avatar
	Face string `json:"face,omitempty"`
	// gender 0 secret 1 female 2 male
	Gender bool `json:"gender,omitempty"`
	// twitter
	Twitter string `json:"twitter,omitempty"`
	// email
	Email string `json:"email,omitempty"`
	// about
	About string `json:"about,omitempty"`
	// last login time
	LastLoginTime time.Time `json:"last_login_time,omitempty"`
	// modify time
	Mtime time.Time `json:"mtime,omitempty"`
	// create time
	Ctime time.Time `json:"ctime,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TUser) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case tuser.FieldGender:
			values[i] = new(sql.NullBool)
		case tuser.FieldID:
			values[i] = new(sql.NullInt64)
		case tuser.FieldWalletPub, tuser.FieldWalletType, tuser.FieldUname, tuser.FieldFace, tuser.FieldTwitter, tuser.FieldEmail, tuser.FieldAbout:
			values[i] = new(sql.NullString)
		case tuser.FieldLastLoginTime, tuser.FieldMtime, tuser.FieldCtime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TUser", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TUser fields.
func (t *TUser) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tuser.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = uint64(value.Int64)
		case tuser.FieldWalletPub:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field wallet_pub", values[i])
			} else if value.Valid {
				t.WalletPub = value.String
			}
		case tuser.FieldWalletType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field wallet_type", values[i])
			} else if value.Valid {
				t.WalletType = value.String
			}
		case tuser.FieldUname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uname", values[i])
			} else if value.Valid {
				t.Uname = value.String
			}
		case tuser.FieldFace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field face", values[i])
			} else if value.Valid {
				t.Face = value.String
			}
		case tuser.FieldGender:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				t.Gender = value.Bool
			}
		case tuser.FieldTwitter:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field twitter", values[i])
			} else if value.Valid {
				t.Twitter = value.String
			}
		case tuser.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				t.Email = value.String
			}
		case tuser.FieldAbout:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field about", values[i])
			} else if value.Valid {
				t.About = value.String
			}
		case tuser.FieldLastLoginTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_login_time", values[i])
			} else if value.Valid {
				t.LastLoginTime = value.Time
			}
		case tuser.FieldMtime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field mtime", values[i])
			} else if value.Valid {
				t.Mtime = value.Time
			}
		case tuser.FieldCtime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ctime", values[i])
			} else if value.Valid {
				t.Ctime = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this TUser.
// Note that you need to call TUser.Unwrap() before calling this method if this TUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *TUser) Update() *TUserUpdateOne {
	return (&TUserClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the TUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *TUser) Unwrap() *TUser {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: TUser is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *TUser) String() string {
	var builder strings.Builder
	builder.WriteString("TUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("wallet_pub=")
	builder.WriteString(t.WalletPub)
	builder.WriteString(", ")
	builder.WriteString("wallet_type=")
	builder.WriteString(t.WalletType)
	builder.WriteString(", ")
	builder.WriteString("uname=")
	builder.WriteString(t.Uname)
	builder.WriteString(", ")
	builder.WriteString("face=")
	builder.WriteString(t.Face)
	builder.WriteString(", ")
	builder.WriteString("gender=")
	builder.WriteString(fmt.Sprintf("%v", t.Gender))
	builder.WriteString(", ")
	builder.WriteString("twitter=")
	builder.WriteString(t.Twitter)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(t.Email)
	builder.WriteString(", ")
	builder.WriteString("about=")
	builder.WriteString(t.About)
	builder.WriteString(", ")
	builder.WriteString("last_login_time=")
	builder.WriteString(t.LastLoginTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("mtime=")
	builder.WriteString(t.Mtime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ctime=")
	builder.WriteString(t.Ctime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TUsers is a parsable slice of TUser.
type TUsers []*TUser

func (t TUsers) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
