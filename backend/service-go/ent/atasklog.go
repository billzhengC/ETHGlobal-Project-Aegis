// Code generated by ent, DO NOT EDIT.

package ent

import (
	"aegis/ent/atasklog"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ATaskLog is the model entity for the ATaskLog schema.
type ATaskLog struct {
	config `json:"-"`
	// ID of the ent.
	// auto increment primary key
	ID uint64 `json:"id,omitempty"`
	// quest id
	QuestID uint64 `json:"quest_id,omitempty"`
	// task id
	TaskID uint64 `json:"task_id,omitempty"`
	// user id
	Mid uint64 `json:"mid,omitempty"`
	// meta
	Meta string `json:"meta,omitempty"`
	// modify time
	Mtime time.Time `json:"mtime,omitempty"`
	// create time
	Ctime time.Time `json:"ctime,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ATaskLog) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case atasklog.FieldID, atasklog.FieldQuestID, atasklog.FieldTaskID, atasklog.FieldMid:
			values[i] = new(sql.NullInt64)
		case atasklog.FieldMeta:
			values[i] = new(sql.NullString)
		case atasklog.FieldMtime, atasklog.FieldCtime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ATaskLog", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ATaskLog fields.
func (al *ATaskLog) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case atasklog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			al.ID = uint64(value.Int64)
		case atasklog.FieldQuestID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quest_id", values[i])
			} else if value.Valid {
				al.QuestID = uint64(value.Int64)
			}
		case atasklog.FieldTaskID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field task_id", values[i])
			} else if value.Valid {
				al.TaskID = uint64(value.Int64)
			}
		case atasklog.FieldMid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field mid", values[i])
			} else if value.Valid {
				al.Mid = uint64(value.Int64)
			}
		case atasklog.FieldMeta:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field meta", values[i])
			} else if value.Valid {
				al.Meta = value.String
			}
		case atasklog.FieldMtime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field mtime", values[i])
			} else if value.Valid {
				al.Mtime = value.Time
			}
		case atasklog.FieldCtime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ctime", values[i])
			} else if value.Valid {
				al.Ctime = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this ATaskLog.
// Note that you need to call ATaskLog.Unwrap() before calling this method if this ATaskLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (al *ATaskLog) Update() *ATaskLogUpdateOne {
	return (&ATaskLogClient{config: al.config}).UpdateOne(al)
}

// Unwrap unwraps the ATaskLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (al *ATaskLog) Unwrap() *ATaskLog {
	_tx, ok := al.config.driver.(*txDriver)
	if !ok {
		panic("ent: ATaskLog is not a transactional entity")
	}
	al.config.driver = _tx.drv
	return al
}

// String implements the fmt.Stringer.
func (al *ATaskLog) String() string {
	var builder strings.Builder
	builder.WriteString("ATaskLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", al.ID))
	builder.WriteString("quest_id=")
	builder.WriteString(fmt.Sprintf("%v", al.QuestID))
	builder.WriteString(", ")
	builder.WriteString("task_id=")
	builder.WriteString(fmt.Sprintf("%v", al.TaskID))
	builder.WriteString(", ")
	builder.WriteString("mid=")
	builder.WriteString(fmt.Sprintf("%v", al.Mid))
	builder.WriteString(", ")
	builder.WriteString("meta=")
	builder.WriteString(al.Meta)
	builder.WriteString(", ")
	builder.WriteString("mtime=")
	builder.WriteString(al.Mtime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ctime=")
	builder.WriteString(al.Ctime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ATaskLogs is a parsable slice of ATaskLog.
type ATaskLogs []*ATaskLog

func (al ATaskLogs) config(cfg config) {
	for _i := range al {
		al[_i].config = cfg
	}
}
