// Code generated by ent, DO NOT EDIT.

package tuser

import (
	"aegis/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// WalletPub applies equality check predicate on the "wallet_pub" field. It's identical to WalletPubEQ.
func WalletPub(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWalletPub), v))
	})
}

// WalletType applies equality check predicate on the "wallet_type" field. It's identical to WalletTypeEQ.
func WalletType(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWalletType), v))
	})
}

// Uname applies equality check predicate on the "uname" field. It's identical to UnameEQ.
func Uname(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUname), v))
	})
}

// Face applies equality check predicate on the "face" field. It's identical to FaceEQ.
func Face(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFace), v))
	})
}

// Gender applies equality check predicate on the "gender" field. It's identical to GenderEQ.
func Gender(v bool) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGender), v))
	})
}

// Twitter applies equality check predicate on the "twitter" field. It's identical to TwitterEQ.
func Twitter(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTwitter), v))
	})
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// About applies equality check predicate on the "about" field. It's identical to AboutEQ.
func About(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAbout), v))
	})
}

// LastLoginTime applies equality check predicate on the "last_login_time" field. It's identical to LastLoginTimeEQ.
func LastLoginTime(v time.Time) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastLoginTime), v))
	})
}

// Mtime applies equality check predicate on the "mtime" field. It's identical to MtimeEQ.
func Mtime(v time.Time) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMtime), v))
	})
}

// Ctime applies equality check predicate on the "ctime" field. It's identical to CtimeEQ.
func Ctime(v time.Time) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCtime), v))
	})
}

// WalletPubEQ applies the EQ predicate on the "wallet_pub" field.
func WalletPubEQ(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWalletPub), v))
	})
}

// WalletPubNEQ applies the NEQ predicate on the "wallet_pub" field.
func WalletPubNEQ(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWalletPub), v))
	})
}

// WalletPubIn applies the In predicate on the "wallet_pub" field.
func WalletPubIn(vs ...string) predicate.TUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldWalletPub), v...))
	})
}

// WalletPubNotIn applies the NotIn predicate on the "wallet_pub" field.
func WalletPubNotIn(vs ...string) predicate.TUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldWalletPub), v...))
	})
}

// WalletPubGT applies the GT predicate on the "wallet_pub" field.
func WalletPubGT(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWalletPub), v))
	})
}

// WalletPubGTE applies the GTE predicate on the "wallet_pub" field.
func WalletPubGTE(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWalletPub), v))
	})
}

// WalletPubLT applies the LT predicate on the "wallet_pub" field.
func WalletPubLT(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWalletPub), v))
	})
}

// WalletPubLTE applies the LTE predicate on the "wallet_pub" field.
func WalletPubLTE(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWalletPub), v))
	})
}

// WalletPubContains applies the Contains predicate on the "wallet_pub" field.
func WalletPubContains(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWalletPub), v))
	})
}

// WalletPubHasPrefix applies the HasPrefix predicate on the "wallet_pub" field.
func WalletPubHasPrefix(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWalletPub), v))
	})
}

// WalletPubHasSuffix applies the HasSuffix predicate on the "wallet_pub" field.
func WalletPubHasSuffix(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWalletPub), v))
	})
}

// WalletPubEqualFold applies the EqualFold predicate on the "wallet_pub" field.
func WalletPubEqualFold(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWalletPub), v))
	})
}

// WalletPubContainsFold applies the ContainsFold predicate on the "wallet_pub" field.
func WalletPubContainsFold(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWalletPub), v))
	})
}

// WalletTypeEQ applies the EQ predicate on the "wallet_type" field.
func WalletTypeEQ(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWalletType), v))
	})
}

// WalletTypeNEQ applies the NEQ predicate on the "wallet_type" field.
func WalletTypeNEQ(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWalletType), v))
	})
}

// WalletTypeIn applies the In predicate on the "wallet_type" field.
func WalletTypeIn(vs ...string) predicate.TUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldWalletType), v...))
	})
}

// WalletTypeNotIn applies the NotIn predicate on the "wallet_type" field.
func WalletTypeNotIn(vs ...string) predicate.TUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldWalletType), v...))
	})
}

// WalletTypeGT applies the GT predicate on the "wallet_type" field.
func WalletTypeGT(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWalletType), v))
	})
}

// WalletTypeGTE applies the GTE predicate on the "wallet_type" field.
func WalletTypeGTE(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWalletType), v))
	})
}

// WalletTypeLT applies the LT predicate on the "wallet_type" field.
func WalletTypeLT(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWalletType), v))
	})
}

// WalletTypeLTE applies the LTE predicate on the "wallet_type" field.
func WalletTypeLTE(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWalletType), v))
	})
}

// WalletTypeContains applies the Contains predicate on the "wallet_type" field.
func WalletTypeContains(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWalletType), v))
	})
}

// WalletTypeHasPrefix applies the HasPrefix predicate on the "wallet_type" field.
func WalletTypeHasPrefix(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWalletType), v))
	})
}

// WalletTypeHasSuffix applies the HasSuffix predicate on the "wallet_type" field.
func WalletTypeHasSuffix(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWalletType), v))
	})
}

// WalletTypeEqualFold applies the EqualFold predicate on the "wallet_type" field.
func WalletTypeEqualFold(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWalletType), v))
	})
}

// WalletTypeContainsFold applies the ContainsFold predicate on the "wallet_type" field.
func WalletTypeContainsFold(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWalletType), v))
	})
}

// UnameEQ applies the EQ predicate on the "uname" field.
func UnameEQ(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUname), v))
	})
}

// UnameNEQ applies the NEQ predicate on the "uname" field.
func UnameNEQ(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUname), v))
	})
}

// UnameIn applies the In predicate on the "uname" field.
func UnameIn(vs ...string) predicate.TUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUname), v...))
	})
}

// UnameNotIn applies the NotIn predicate on the "uname" field.
func UnameNotIn(vs ...string) predicate.TUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUname), v...))
	})
}

// UnameGT applies the GT predicate on the "uname" field.
func UnameGT(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUname), v))
	})
}

// UnameGTE applies the GTE predicate on the "uname" field.
func UnameGTE(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUname), v))
	})
}

// UnameLT applies the LT predicate on the "uname" field.
func UnameLT(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUname), v))
	})
}

// UnameLTE applies the LTE predicate on the "uname" field.
func UnameLTE(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUname), v))
	})
}

// UnameContains applies the Contains predicate on the "uname" field.
func UnameContains(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUname), v))
	})
}

// UnameHasPrefix applies the HasPrefix predicate on the "uname" field.
func UnameHasPrefix(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUname), v))
	})
}

// UnameHasSuffix applies the HasSuffix predicate on the "uname" field.
func UnameHasSuffix(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUname), v))
	})
}

// UnameEqualFold applies the EqualFold predicate on the "uname" field.
func UnameEqualFold(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUname), v))
	})
}

// UnameContainsFold applies the ContainsFold predicate on the "uname" field.
func UnameContainsFold(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUname), v))
	})
}

// FaceEQ applies the EQ predicate on the "face" field.
func FaceEQ(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFace), v))
	})
}

// FaceNEQ applies the NEQ predicate on the "face" field.
func FaceNEQ(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFace), v))
	})
}

// FaceIn applies the In predicate on the "face" field.
func FaceIn(vs ...string) predicate.TUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFace), v...))
	})
}

// FaceNotIn applies the NotIn predicate on the "face" field.
func FaceNotIn(vs ...string) predicate.TUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFace), v...))
	})
}

// FaceGT applies the GT predicate on the "face" field.
func FaceGT(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFace), v))
	})
}

// FaceGTE applies the GTE predicate on the "face" field.
func FaceGTE(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFace), v))
	})
}

// FaceLT applies the LT predicate on the "face" field.
func FaceLT(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFace), v))
	})
}

// FaceLTE applies the LTE predicate on the "face" field.
func FaceLTE(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFace), v))
	})
}

// FaceContains applies the Contains predicate on the "face" field.
func FaceContains(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFace), v))
	})
}

// FaceHasPrefix applies the HasPrefix predicate on the "face" field.
func FaceHasPrefix(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFace), v))
	})
}

// FaceHasSuffix applies the HasSuffix predicate on the "face" field.
func FaceHasSuffix(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFace), v))
	})
}

// FaceEqualFold applies the EqualFold predicate on the "face" field.
func FaceEqualFold(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFace), v))
	})
}

// FaceContainsFold applies the ContainsFold predicate on the "face" field.
func FaceContainsFold(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFace), v))
	})
}

// GenderEQ applies the EQ predicate on the "gender" field.
func GenderEQ(v bool) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGender), v))
	})
}

// GenderNEQ applies the NEQ predicate on the "gender" field.
func GenderNEQ(v bool) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGender), v))
	})
}

// TwitterEQ applies the EQ predicate on the "twitter" field.
func TwitterEQ(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTwitter), v))
	})
}

// TwitterNEQ applies the NEQ predicate on the "twitter" field.
func TwitterNEQ(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTwitter), v))
	})
}

// TwitterIn applies the In predicate on the "twitter" field.
func TwitterIn(vs ...string) predicate.TUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTwitter), v...))
	})
}

// TwitterNotIn applies the NotIn predicate on the "twitter" field.
func TwitterNotIn(vs ...string) predicate.TUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTwitter), v...))
	})
}

// TwitterGT applies the GT predicate on the "twitter" field.
func TwitterGT(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTwitter), v))
	})
}

// TwitterGTE applies the GTE predicate on the "twitter" field.
func TwitterGTE(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTwitter), v))
	})
}

// TwitterLT applies the LT predicate on the "twitter" field.
func TwitterLT(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTwitter), v))
	})
}

// TwitterLTE applies the LTE predicate on the "twitter" field.
func TwitterLTE(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTwitter), v))
	})
}

// TwitterContains applies the Contains predicate on the "twitter" field.
func TwitterContains(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTwitter), v))
	})
}

// TwitterHasPrefix applies the HasPrefix predicate on the "twitter" field.
func TwitterHasPrefix(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTwitter), v))
	})
}

// TwitterHasSuffix applies the HasSuffix predicate on the "twitter" field.
func TwitterHasSuffix(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTwitter), v))
	})
}

// TwitterEqualFold applies the EqualFold predicate on the "twitter" field.
func TwitterEqualFold(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTwitter), v))
	})
}

// TwitterContainsFold applies the ContainsFold predicate on the "twitter" field.
func TwitterContainsFold(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTwitter), v))
	})
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEmail), v))
	})
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.TUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEmail), v...))
	})
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.TUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEmail), v...))
	})
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEmail), v))
	})
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEmail), v))
	})
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEmail), v))
	})
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEmail), v))
	})
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEmail), v))
	})
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEmail), v))
	})
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEmail), v))
	})
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEmail), v))
	})
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEmail), v))
	})
}

// AboutEQ applies the EQ predicate on the "about" field.
func AboutEQ(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAbout), v))
	})
}

// AboutNEQ applies the NEQ predicate on the "about" field.
func AboutNEQ(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAbout), v))
	})
}

// AboutIn applies the In predicate on the "about" field.
func AboutIn(vs ...string) predicate.TUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAbout), v...))
	})
}

// AboutNotIn applies the NotIn predicate on the "about" field.
func AboutNotIn(vs ...string) predicate.TUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAbout), v...))
	})
}

// AboutGT applies the GT predicate on the "about" field.
func AboutGT(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAbout), v))
	})
}

// AboutGTE applies the GTE predicate on the "about" field.
func AboutGTE(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAbout), v))
	})
}

// AboutLT applies the LT predicate on the "about" field.
func AboutLT(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAbout), v))
	})
}

// AboutLTE applies the LTE predicate on the "about" field.
func AboutLTE(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAbout), v))
	})
}

// AboutContains applies the Contains predicate on the "about" field.
func AboutContains(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAbout), v))
	})
}

// AboutHasPrefix applies the HasPrefix predicate on the "about" field.
func AboutHasPrefix(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAbout), v))
	})
}

// AboutHasSuffix applies the HasSuffix predicate on the "about" field.
func AboutHasSuffix(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAbout), v))
	})
}

// AboutEqualFold applies the EqualFold predicate on the "about" field.
func AboutEqualFold(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAbout), v))
	})
}

// AboutContainsFold applies the ContainsFold predicate on the "about" field.
func AboutContainsFold(v string) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAbout), v))
	})
}

// LastLoginTimeEQ applies the EQ predicate on the "last_login_time" field.
func LastLoginTimeEQ(v time.Time) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastLoginTime), v))
	})
}

// LastLoginTimeNEQ applies the NEQ predicate on the "last_login_time" field.
func LastLoginTimeNEQ(v time.Time) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastLoginTime), v))
	})
}

// LastLoginTimeIn applies the In predicate on the "last_login_time" field.
func LastLoginTimeIn(vs ...time.Time) predicate.TUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLastLoginTime), v...))
	})
}

// LastLoginTimeNotIn applies the NotIn predicate on the "last_login_time" field.
func LastLoginTimeNotIn(vs ...time.Time) predicate.TUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLastLoginTime), v...))
	})
}

// LastLoginTimeGT applies the GT predicate on the "last_login_time" field.
func LastLoginTimeGT(v time.Time) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastLoginTime), v))
	})
}

// LastLoginTimeGTE applies the GTE predicate on the "last_login_time" field.
func LastLoginTimeGTE(v time.Time) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastLoginTime), v))
	})
}

// LastLoginTimeLT applies the LT predicate on the "last_login_time" field.
func LastLoginTimeLT(v time.Time) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastLoginTime), v))
	})
}

// LastLoginTimeLTE applies the LTE predicate on the "last_login_time" field.
func LastLoginTimeLTE(v time.Time) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastLoginTime), v))
	})
}

// MtimeEQ applies the EQ predicate on the "mtime" field.
func MtimeEQ(v time.Time) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMtime), v))
	})
}

// MtimeNEQ applies the NEQ predicate on the "mtime" field.
func MtimeNEQ(v time.Time) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMtime), v))
	})
}

// MtimeIn applies the In predicate on the "mtime" field.
func MtimeIn(vs ...time.Time) predicate.TUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMtime), v...))
	})
}

// MtimeNotIn applies the NotIn predicate on the "mtime" field.
func MtimeNotIn(vs ...time.Time) predicate.TUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMtime), v...))
	})
}

// MtimeGT applies the GT predicate on the "mtime" field.
func MtimeGT(v time.Time) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMtime), v))
	})
}

// MtimeGTE applies the GTE predicate on the "mtime" field.
func MtimeGTE(v time.Time) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMtime), v))
	})
}

// MtimeLT applies the LT predicate on the "mtime" field.
func MtimeLT(v time.Time) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMtime), v))
	})
}

// MtimeLTE applies the LTE predicate on the "mtime" field.
func MtimeLTE(v time.Time) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMtime), v))
	})
}

// CtimeEQ applies the EQ predicate on the "ctime" field.
func CtimeEQ(v time.Time) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCtime), v))
	})
}

// CtimeNEQ applies the NEQ predicate on the "ctime" field.
func CtimeNEQ(v time.Time) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCtime), v))
	})
}

// CtimeIn applies the In predicate on the "ctime" field.
func CtimeIn(vs ...time.Time) predicate.TUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCtime), v...))
	})
}

// CtimeNotIn applies the NotIn predicate on the "ctime" field.
func CtimeNotIn(vs ...time.Time) predicate.TUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCtime), v...))
	})
}

// CtimeGT applies the GT predicate on the "ctime" field.
func CtimeGT(v time.Time) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCtime), v))
	})
}

// CtimeGTE applies the GTE predicate on the "ctime" field.
func CtimeGTE(v time.Time) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCtime), v))
	})
}

// CtimeLT applies the LT predicate on the "ctime" field.
func CtimeLT(v time.Time) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCtime), v))
	})
}

// CtimeLTE applies the LTE predicate on the "ctime" field.
func CtimeLTE(v time.Time) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCtime), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TUser) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TUser) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TUser) predicate.TUser {
	return predicate.TUser(func(s *sql.Selector) {
		p(s.Not())
	})
}
