// Code generated by ent, DO NOT EDIT.

package tgocache

import (
	"aegis/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CacheKey applies equality check predicate on the "cache_key" field. It's identical to CacheKeyEQ.
func CacheKey(v string) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCacheKey), v))
	})
}

// CacheValue applies equality check predicate on the "cache_value" field. It's identical to CacheValueEQ.
func CacheValue(v string) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCacheValue), v))
	})
}

// Mtime applies equality check predicate on the "mtime" field. It's identical to MtimeEQ.
func Mtime(v time.Time) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMtime), v))
	})
}

// Ctime applies equality check predicate on the "ctime" field. It's identical to CtimeEQ.
func Ctime(v time.Time) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCtime), v))
	})
}

// CacheKeyEQ applies the EQ predicate on the "cache_key" field.
func CacheKeyEQ(v string) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCacheKey), v))
	})
}

// CacheKeyNEQ applies the NEQ predicate on the "cache_key" field.
func CacheKeyNEQ(v string) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCacheKey), v))
	})
}

// CacheKeyIn applies the In predicate on the "cache_key" field.
func CacheKeyIn(vs ...string) predicate.TGoCache {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCacheKey), v...))
	})
}

// CacheKeyNotIn applies the NotIn predicate on the "cache_key" field.
func CacheKeyNotIn(vs ...string) predicate.TGoCache {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCacheKey), v...))
	})
}

// CacheKeyGT applies the GT predicate on the "cache_key" field.
func CacheKeyGT(v string) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCacheKey), v))
	})
}

// CacheKeyGTE applies the GTE predicate on the "cache_key" field.
func CacheKeyGTE(v string) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCacheKey), v))
	})
}

// CacheKeyLT applies the LT predicate on the "cache_key" field.
func CacheKeyLT(v string) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCacheKey), v))
	})
}

// CacheKeyLTE applies the LTE predicate on the "cache_key" field.
func CacheKeyLTE(v string) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCacheKey), v))
	})
}

// CacheKeyContains applies the Contains predicate on the "cache_key" field.
func CacheKeyContains(v string) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCacheKey), v))
	})
}

// CacheKeyHasPrefix applies the HasPrefix predicate on the "cache_key" field.
func CacheKeyHasPrefix(v string) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCacheKey), v))
	})
}

// CacheKeyHasSuffix applies the HasSuffix predicate on the "cache_key" field.
func CacheKeyHasSuffix(v string) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCacheKey), v))
	})
}

// CacheKeyEqualFold applies the EqualFold predicate on the "cache_key" field.
func CacheKeyEqualFold(v string) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCacheKey), v))
	})
}

// CacheKeyContainsFold applies the ContainsFold predicate on the "cache_key" field.
func CacheKeyContainsFold(v string) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCacheKey), v))
	})
}

// CacheValueEQ applies the EQ predicate on the "cache_value" field.
func CacheValueEQ(v string) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCacheValue), v))
	})
}

// CacheValueNEQ applies the NEQ predicate on the "cache_value" field.
func CacheValueNEQ(v string) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCacheValue), v))
	})
}

// CacheValueIn applies the In predicate on the "cache_value" field.
func CacheValueIn(vs ...string) predicate.TGoCache {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCacheValue), v...))
	})
}

// CacheValueNotIn applies the NotIn predicate on the "cache_value" field.
func CacheValueNotIn(vs ...string) predicate.TGoCache {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCacheValue), v...))
	})
}

// CacheValueGT applies the GT predicate on the "cache_value" field.
func CacheValueGT(v string) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCacheValue), v))
	})
}

// CacheValueGTE applies the GTE predicate on the "cache_value" field.
func CacheValueGTE(v string) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCacheValue), v))
	})
}

// CacheValueLT applies the LT predicate on the "cache_value" field.
func CacheValueLT(v string) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCacheValue), v))
	})
}

// CacheValueLTE applies the LTE predicate on the "cache_value" field.
func CacheValueLTE(v string) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCacheValue), v))
	})
}

// CacheValueContains applies the Contains predicate on the "cache_value" field.
func CacheValueContains(v string) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCacheValue), v))
	})
}

// CacheValueHasPrefix applies the HasPrefix predicate on the "cache_value" field.
func CacheValueHasPrefix(v string) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCacheValue), v))
	})
}

// CacheValueHasSuffix applies the HasSuffix predicate on the "cache_value" field.
func CacheValueHasSuffix(v string) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCacheValue), v))
	})
}

// CacheValueEqualFold applies the EqualFold predicate on the "cache_value" field.
func CacheValueEqualFold(v string) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCacheValue), v))
	})
}

// CacheValueContainsFold applies the ContainsFold predicate on the "cache_value" field.
func CacheValueContainsFold(v string) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCacheValue), v))
	})
}

// MtimeEQ applies the EQ predicate on the "mtime" field.
func MtimeEQ(v time.Time) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMtime), v))
	})
}

// MtimeNEQ applies the NEQ predicate on the "mtime" field.
func MtimeNEQ(v time.Time) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMtime), v))
	})
}

// MtimeIn applies the In predicate on the "mtime" field.
func MtimeIn(vs ...time.Time) predicate.TGoCache {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMtime), v...))
	})
}

// MtimeNotIn applies the NotIn predicate on the "mtime" field.
func MtimeNotIn(vs ...time.Time) predicate.TGoCache {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMtime), v...))
	})
}

// MtimeGT applies the GT predicate on the "mtime" field.
func MtimeGT(v time.Time) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMtime), v))
	})
}

// MtimeGTE applies the GTE predicate on the "mtime" field.
func MtimeGTE(v time.Time) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMtime), v))
	})
}

// MtimeLT applies the LT predicate on the "mtime" field.
func MtimeLT(v time.Time) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMtime), v))
	})
}

// MtimeLTE applies the LTE predicate on the "mtime" field.
func MtimeLTE(v time.Time) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMtime), v))
	})
}

// CtimeEQ applies the EQ predicate on the "ctime" field.
func CtimeEQ(v time.Time) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCtime), v))
	})
}

// CtimeNEQ applies the NEQ predicate on the "ctime" field.
func CtimeNEQ(v time.Time) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCtime), v))
	})
}

// CtimeIn applies the In predicate on the "ctime" field.
func CtimeIn(vs ...time.Time) predicate.TGoCache {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCtime), v...))
	})
}

// CtimeNotIn applies the NotIn predicate on the "ctime" field.
func CtimeNotIn(vs ...time.Time) predicate.TGoCache {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCtime), v...))
	})
}

// CtimeGT applies the GT predicate on the "ctime" field.
func CtimeGT(v time.Time) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCtime), v))
	})
}

// CtimeGTE applies the GTE predicate on the "ctime" field.
func CtimeGTE(v time.Time) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCtime), v))
	})
}

// CtimeLT applies the LT predicate on the "ctime" field.
func CtimeLT(v time.Time) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCtime), v))
	})
}

// CtimeLTE applies the LTE predicate on the "ctime" field.
func CtimeLTE(v time.Time) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCtime), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TGoCache) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TGoCache) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TGoCache) predicate.TGoCache {
	return predicate.TGoCache(func(s *sql.Selector) {
		p(s.Not())
	})
}
