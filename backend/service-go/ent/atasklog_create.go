// Code generated by ent, DO NOT EDIT.

package ent

import (
	"aegis/ent/atasklog"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ATaskLogCreate is the builder for creating a ATaskLog entity.
type ATaskLogCreate struct {
	config
	mutation *ATaskLogMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetQuestID sets the "quest_id" field.
func (alc *ATaskLogCreate) SetQuestID(u uint64) *ATaskLogCreate {
	alc.mutation.SetQuestID(u)
	return alc
}

// SetNillableQuestID sets the "quest_id" field if the given value is not nil.
func (alc *ATaskLogCreate) SetNillableQuestID(u *uint64) *ATaskLogCreate {
	if u != nil {
		alc.SetQuestID(*u)
	}
	return alc
}

// SetTaskID sets the "task_id" field.
func (alc *ATaskLogCreate) SetTaskID(u uint64) *ATaskLogCreate {
	alc.mutation.SetTaskID(u)
	return alc
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (alc *ATaskLogCreate) SetNillableTaskID(u *uint64) *ATaskLogCreate {
	if u != nil {
		alc.SetTaskID(*u)
	}
	return alc
}

// SetMid sets the "mid" field.
func (alc *ATaskLogCreate) SetMid(u uint64) *ATaskLogCreate {
	alc.mutation.SetMid(u)
	return alc
}

// SetNillableMid sets the "mid" field if the given value is not nil.
func (alc *ATaskLogCreate) SetNillableMid(u *uint64) *ATaskLogCreate {
	if u != nil {
		alc.SetMid(*u)
	}
	return alc
}

// SetMeta sets the "meta" field.
func (alc *ATaskLogCreate) SetMeta(s string) *ATaskLogCreate {
	alc.mutation.SetMeta(s)
	return alc
}

// SetNillableMeta sets the "meta" field if the given value is not nil.
func (alc *ATaskLogCreate) SetNillableMeta(s *string) *ATaskLogCreate {
	if s != nil {
		alc.SetMeta(*s)
	}
	return alc
}

// SetMtime sets the "mtime" field.
func (alc *ATaskLogCreate) SetMtime(t time.Time) *ATaskLogCreate {
	alc.mutation.SetMtime(t)
	return alc
}

// SetNillableMtime sets the "mtime" field if the given value is not nil.
func (alc *ATaskLogCreate) SetNillableMtime(t *time.Time) *ATaskLogCreate {
	if t != nil {
		alc.SetMtime(*t)
	}
	return alc
}

// SetCtime sets the "ctime" field.
func (alc *ATaskLogCreate) SetCtime(t time.Time) *ATaskLogCreate {
	alc.mutation.SetCtime(t)
	return alc
}

// SetNillableCtime sets the "ctime" field if the given value is not nil.
func (alc *ATaskLogCreate) SetNillableCtime(t *time.Time) *ATaskLogCreate {
	if t != nil {
		alc.SetCtime(*t)
	}
	return alc
}

// SetID sets the "id" field.
func (alc *ATaskLogCreate) SetID(u uint64) *ATaskLogCreate {
	alc.mutation.SetID(u)
	return alc
}

// Mutation returns the ATaskLogMutation object of the builder.
func (alc *ATaskLogCreate) Mutation() *ATaskLogMutation {
	return alc.mutation
}

// Save creates the ATaskLog in the database.
func (alc *ATaskLogCreate) Save(ctx context.Context) (*ATaskLog, error) {
	var (
		err  error
		node *ATaskLog
	)
	alc.defaults()
	if len(alc.hooks) == 0 {
		if err = alc.check(); err != nil {
			return nil, err
		}
		node, err = alc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ATaskLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = alc.check(); err != nil {
				return nil, err
			}
			alc.mutation = mutation
			if node, err = alc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(alc.hooks) - 1; i >= 0; i-- {
			if alc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = alc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, alc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ATaskLog)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ATaskLogMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (alc *ATaskLogCreate) SaveX(ctx context.Context) *ATaskLog {
	v, err := alc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (alc *ATaskLogCreate) Exec(ctx context.Context) error {
	_, err := alc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alc *ATaskLogCreate) ExecX(ctx context.Context) {
	if err := alc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (alc *ATaskLogCreate) defaults() {
	if _, ok := alc.mutation.QuestID(); !ok {
		v := atasklog.DefaultQuestID
		alc.mutation.SetQuestID(v)
	}
	if _, ok := alc.mutation.TaskID(); !ok {
		v := atasklog.DefaultTaskID
		alc.mutation.SetTaskID(v)
	}
	if _, ok := alc.mutation.Mid(); !ok {
		v := atasklog.DefaultMid
		alc.mutation.SetMid(v)
	}
	if _, ok := alc.mutation.Meta(); !ok {
		v := atasklog.DefaultMeta
		alc.mutation.SetMeta(v)
	}
	if _, ok := alc.mutation.Mtime(); !ok {
		v := atasklog.DefaultMtime
		alc.mutation.SetMtime(v)
	}
	if _, ok := alc.mutation.Ctime(); !ok {
		v := atasklog.DefaultCtime
		alc.mutation.SetCtime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (alc *ATaskLogCreate) check() error {
	if _, ok := alc.mutation.QuestID(); !ok {
		return &ValidationError{Name: "quest_id", err: errors.New(`ent: missing required field "ATaskLog.quest_id"`)}
	}
	if _, ok := alc.mutation.TaskID(); !ok {
		return &ValidationError{Name: "task_id", err: errors.New(`ent: missing required field "ATaskLog.task_id"`)}
	}
	if _, ok := alc.mutation.Mid(); !ok {
		return &ValidationError{Name: "mid", err: errors.New(`ent: missing required field "ATaskLog.mid"`)}
	}
	if _, ok := alc.mutation.Meta(); !ok {
		return &ValidationError{Name: "meta", err: errors.New(`ent: missing required field "ATaskLog.meta"`)}
	}
	if _, ok := alc.mutation.Mtime(); !ok {
		return &ValidationError{Name: "mtime", err: errors.New(`ent: missing required field "ATaskLog.mtime"`)}
	}
	if _, ok := alc.mutation.Ctime(); !ok {
		return &ValidationError{Name: "ctime", err: errors.New(`ent: missing required field "ATaskLog.ctime"`)}
	}
	return nil
}

func (alc *ATaskLogCreate) sqlSave(ctx context.Context) (*ATaskLog, error) {
	_node, _spec := alc.createSpec()
	if err := sqlgraph.CreateNode(ctx, alc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (alc *ATaskLogCreate) createSpec() (*ATaskLog, *sqlgraph.CreateSpec) {
	var (
		_node = &ATaskLog{config: alc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: atasklog.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: atasklog.FieldID,
			},
		}
	)
	_spec.OnConflict = alc.conflict
	if id, ok := alc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := alc.mutation.QuestID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: atasklog.FieldQuestID,
		})
		_node.QuestID = value
	}
	if value, ok := alc.mutation.TaskID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: atasklog.FieldTaskID,
		})
		_node.TaskID = value
	}
	if value, ok := alc.mutation.Mid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: atasklog.FieldMid,
		})
		_node.Mid = value
	}
	if value, ok := alc.mutation.Meta(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: atasklog.FieldMeta,
		})
		_node.Meta = value
	}
	if value, ok := alc.mutation.Mtime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: atasklog.FieldMtime,
		})
		_node.Mtime = value
	}
	if value, ok := alc.mutation.Ctime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: atasklog.FieldCtime,
		})
		_node.Ctime = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ATaskLog.Create().
//		SetQuestID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ATaskLogUpsert) {
//			SetQuestID(v+v).
//		}).
//		Exec(ctx)
//
func (alc *ATaskLogCreate) OnConflict(opts ...sql.ConflictOption) *ATaskLogUpsertOne {
	alc.conflict = opts
	return &ATaskLogUpsertOne{
		create: alc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ATaskLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (alc *ATaskLogCreate) OnConflictColumns(columns ...string) *ATaskLogUpsertOne {
	alc.conflict = append(alc.conflict, sql.ConflictColumns(columns...))
	return &ATaskLogUpsertOne{
		create: alc,
	}
}

type (
	// ATaskLogUpsertOne is the builder for "upsert"-ing
	//  one ATaskLog node.
	ATaskLogUpsertOne struct {
		create *ATaskLogCreate
	}

	// ATaskLogUpsert is the "OnConflict" setter.
	ATaskLogUpsert struct {
		*sql.UpdateSet
	}
)

// SetQuestID sets the "quest_id" field.
func (u *ATaskLogUpsert) SetQuestID(v uint64) *ATaskLogUpsert {
	u.Set(atasklog.FieldQuestID, v)
	return u
}

// UpdateQuestID sets the "quest_id" field to the value that was provided on create.
func (u *ATaskLogUpsert) UpdateQuestID() *ATaskLogUpsert {
	u.SetExcluded(atasklog.FieldQuestID)
	return u
}

// AddQuestID adds v to the "quest_id" field.
func (u *ATaskLogUpsert) AddQuestID(v uint64) *ATaskLogUpsert {
	u.Add(atasklog.FieldQuestID, v)
	return u
}

// SetTaskID sets the "task_id" field.
func (u *ATaskLogUpsert) SetTaskID(v uint64) *ATaskLogUpsert {
	u.Set(atasklog.FieldTaskID, v)
	return u
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *ATaskLogUpsert) UpdateTaskID() *ATaskLogUpsert {
	u.SetExcluded(atasklog.FieldTaskID)
	return u
}

// AddTaskID adds v to the "task_id" field.
func (u *ATaskLogUpsert) AddTaskID(v uint64) *ATaskLogUpsert {
	u.Add(atasklog.FieldTaskID, v)
	return u
}

// SetMid sets the "mid" field.
func (u *ATaskLogUpsert) SetMid(v uint64) *ATaskLogUpsert {
	u.Set(atasklog.FieldMid, v)
	return u
}

// UpdateMid sets the "mid" field to the value that was provided on create.
func (u *ATaskLogUpsert) UpdateMid() *ATaskLogUpsert {
	u.SetExcluded(atasklog.FieldMid)
	return u
}

// AddMid adds v to the "mid" field.
func (u *ATaskLogUpsert) AddMid(v uint64) *ATaskLogUpsert {
	u.Add(atasklog.FieldMid, v)
	return u
}

// SetMeta sets the "meta" field.
func (u *ATaskLogUpsert) SetMeta(v string) *ATaskLogUpsert {
	u.Set(atasklog.FieldMeta, v)
	return u
}

// UpdateMeta sets the "meta" field to the value that was provided on create.
func (u *ATaskLogUpsert) UpdateMeta() *ATaskLogUpsert {
	u.SetExcluded(atasklog.FieldMeta)
	return u
}

// SetMtime sets the "mtime" field.
func (u *ATaskLogUpsert) SetMtime(v time.Time) *ATaskLogUpsert {
	u.Set(atasklog.FieldMtime, v)
	return u
}

// UpdateMtime sets the "mtime" field to the value that was provided on create.
func (u *ATaskLogUpsert) UpdateMtime() *ATaskLogUpsert {
	u.SetExcluded(atasklog.FieldMtime)
	return u
}

// SetCtime sets the "ctime" field.
func (u *ATaskLogUpsert) SetCtime(v time.Time) *ATaskLogUpsert {
	u.Set(atasklog.FieldCtime, v)
	return u
}

// UpdateCtime sets the "ctime" field to the value that was provided on create.
func (u *ATaskLogUpsert) UpdateCtime() *ATaskLogUpsert {
	u.SetExcluded(atasklog.FieldCtime)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ATaskLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(atasklog.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ATaskLogUpsertOne) UpdateNewValues() *ATaskLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(atasklog.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.ATaskLog.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *ATaskLogUpsertOne) Ignore() *ATaskLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ATaskLogUpsertOne) DoNothing() *ATaskLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ATaskLogCreate.OnConflict
// documentation for more info.
func (u *ATaskLogUpsertOne) Update(set func(*ATaskLogUpsert)) *ATaskLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ATaskLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetQuestID sets the "quest_id" field.
func (u *ATaskLogUpsertOne) SetQuestID(v uint64) *ATaskLogUpsertOne {
	return u.Update(func(s *ATaskLogUpsert) {
		s.SetQuestID(v)
	})
}

// AddQuestID adds v to the "quest_id" field.
func (u *ATaskLogUpsertOne) AddQuestID(v uint64) *ATaskLogUpsertOne {
	return u.Update(func(s *ATaskLogUpsert) {
		s.AddQuestID(v)
	})
}

// UpdateQuestID sets the "quest_id" field to the value that was provided on create.
func (u *ATaskLogUpsertOne) UpdateQuestID() *ATaskLogUpsertOne {
	return u.Update(func(s *ATaskLogUpsert) {
		s.UpdateQuestID()
	})
}

// SetTaskID sets the "task_id" field.
func (u *ATaskLogUpsertOne) SetTaskID(v uint64) *ATaskLogUpsertOne {
	return u.Update(func(s *ATaskLogUpsert) {
		s.SetTaskID(v)
	})
}

// AddTaskID adds v to the "task_id" field.
func (u *ATaskLogUpsertOne) AddTaskID(v uint64) *ATaskLogUpsertOne {
	return u.Update(func(s *ATaskLogUpsert) {
		s.AddTaskID(v)
	})
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *ATaskLogUpsertOne) UpdateTaskID() *ATaskLogUpsertOne {
	return u.Update(func(s *ATaskLogUpsert) {
		s.UpdateTaskID()
	})
}

// SetMid sets the "mid" field.
func (u *ATaskLogUpsertOne) SetMid(v uint64) *ATaskLogUpsertOne {
	return u.Update(func(s *ATaskLogUpsert) {
		s.SetMid(v)
	})
}

// AddMid adds v to the "mid" field.
func (u *ATaskLogUpsertOne) AddMid(v uint64) *ATaskLogUpsertOne {
	return u.Update(func(s *ATaskLogUpsert) {
		s.AddMid(v)
	})
}

// UpdateMid sets the "mid" field to the value that was provided on create.
func (u *ATaskLogUpsertOne) UpdateMid() *ATaskLogUpsertOne {
	return u.Update(func(s *ATaskLogUpsert) {
		s.UpdateMid()
	})
}

// SetMeta sets the "meta" field.
func (u *ATaskLogUpsertOne) SetMeta(v string) *ATaskLogUpsertOne {
	return u.Update(func(s *ATaskLogUpsert) {
		s.SetMeta(v)
	})
}

// UpdateMeta sets the "meta" field to the value that was provided on create.
func (u *ATaskLogUpsertOne) UpdateMeta() *ATaskLogUpsertOne {
	return u.Update(func(s *ATaskLogUpsert) {
		s.UpdateMeta()
	})
}

// SetMtime sets the "mtime" field.
func (u *ATaskLogUpsertOne) SetMtime(v time.Time) *ATaskLogUpsertOne {
	return u.Update(func(s *ATaskLogUpsert) {
		s.SetMtime(v)
	})
}

// UpdateMtime sets the "mtime" field to the value that was provided on create.
func (u *ATaskLogUpsertOne) UpdateMtime() *ATaskLogUpsertOne {
	return u.Update(func(s *ATaskLogUpsert) {
		s.UpdateMtime()
	})
}

// SetCtime sets the "ctime" field.
func (u *ATaskLogUpsertOne) SetCtime(v time.Time) *ATaskLogUpsertOne {
	return u.Update(func(s *ATaskLogUpsert) {
		s.SetCtime(v)
	})
}

// UpdateCtime sets the "ctime" field to the value that was provided on create.
func (u *ATaskLogUpsertOne) UpdateCtime() *ATaskLogUpsertOne {
	return u.Update(func(s *ATaskLogUpsert) {
		s.UpdateCtime()
	})
}

// Exec executes the query.
func (u *ATaskLogUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ATaskLogCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ATaskLogUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ATaskLogUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ATaskLogUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ATaskLogCreateBulk is the builder for creating many ATaskLog entities in bulk.
type ATaskLogCreateBulk struct {
	config
	builders []*ATaskLogCreate
	conflict []sql.ConflictOption
}

// Save creates the ATaskLog entities in the database.
func (alcb *ATaskLogCreateBulk) Save(ctx context.Context) ([]*ATaskLog, error) {
	specs := make([]*sqlgraph.CreateSpec, len(alcb.builders))
	nodes := make([]*ATaskLog, len(alcb.builders))
	mutators := make([]Mutator, len(alcb.builders))
	for i := range alcb.builders {
		func(i int, root context.Context) {
			builder := alcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ATaskLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, alcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = alcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, alcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, alcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (alcb *ATaskLogCreateBulk) SaveX(ctx context.Context) []*ATaskLog {
	v, err := alcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (alcb *ATaskLogCreateBulk) Exec(ctx context.Context) error {
	_, err := alcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alcb *ATaskLogCreateBulk) ExecX(ctx context.Context) {
	if err := alcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ATaskLog.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ATaskLogUpsert) {
//			SetQuestID(v+v).
//		}).
//		Exec(ctx)
//
func (alcb *ATaskLogCreateBulk) OnConflict(opts ...sql.ConflictOption) *ATaskLogUpsertBulk {
	alcb.conflict = opts
	return &ATaskLogUpsertBulk{
		create: alcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ATaskLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (alcb *ATaskLogCreateBulk) OnConflictColumns(columns ...string) *ATaskLogUpsertBulk {
	alcb.conflict = append(alcb.conflict, sql.ConflictColumns(columns...))
	return &ATaskLogUpsertBulk{
		create: alcb,
	}
}

// ATaskLogUpsertBulk is the builder for "upsert"-ing
// a bulk of ATaskLog nodes.
type ATaskLogUpsertBulk struct {
	create *ATaskLogCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ATaskLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(atasklog.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ATaskLogUpsertBulk) UpdateNewValues() *ATaskLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(atasklog.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ATaskLog.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *ATaskLogUpsertBulk) Ignore() *ATaskLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ATaskLogUpsertBulk) DoNothing() *ATaskLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ATaskLogCreateBulk.OnConflict
// documentation for more info.
func (u *ATaskLogUpsertBulk) Update(set func(*ATaskLogUpsert)) *ATaskLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ATaskLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetQuestID sets the "quest_id" field.
func (u *ATaskLogUpsertBulk) SetQuestID(v uint64) *ATaskLogUpsertBulk {
	return u.Update(func(s *ATaskLogUpsert) {
		s.SetQuestID(v)
	})
}

// AddQuestID adds v to the "quest_id" field.
func (u *ATaskLogUpsertBulk) AddQuestID(v uint64) *ATaskLogUpsertBulk {
	return u.Update(func(s *ATaskLogUpsert) {
		s.AddQuestID(v)
	})
}

// UpdateQuestID sets the "quest_id" field to the value that was provided on create.
func (u *ATaskLogUpsertBulk) UpdateQuestID() *ATaskLogUpsertBulk {
	return u.Update(func(s *ATaskLogUpsert) {
		s.UpdateQuestID()
	})
}

// SetTaskID sets the "task_id" field.
func (u *ATaskLogUpsertBulk) SetTaskID(v uint64) *ATaskLogUpsertBulk {
	return u.Update(func(s *ATaskLogUpsert) {
		s.SetTaskID(v)
	})
}

// AddTaskID adds v to the "task_id" field.
func (u *ATaskLogUpsertBulk) AddTaskID(v uint64) *ATaskLogUpsertBulk {
	return u.Update(func(s *ATaskLogUpsert) {
		s.AddTaskID(v)
	})
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *ATaskLogUpsertBulk) UpdateTaskID() *ATaskLogUpsertBulk {
	return u.Update(func(s *ATaskLogUpsert) {
		s.UpdateTaskID()
	})
}

// SetMid sets the "mid" field.
func (u *ATaskLogUpsertBulk) SetMid(v uint64) *ATaskLogUpsertBulk {
	return u.Update(func(s *ATaskLogUpsert) {
		s.SetMid(v)
	})
}

// AddMid adds v to the "mid" field.
func (u *ATaskLogUpsertBulk) AddMid(v uint64) *ATaskLogUpsertBulk {
	return u.Update(func(s *ATaskLogUpsert) {
		s.AddMid(v)
	})
}

// UpdateMid sets the "mid" field to the value that was provided on create.
func (u *ATaskLogUpsertBulk) UpdateMid() *ATaskLogUpsertBulk {
	return u.Update(func(s *ATaskLogUpsert) {
		s.UpdateMid()
	})
}

// SetMeta sets the "meta" field.
func (u *ATaskLogUpsertBulk) SetMeta(v string) *ATaskLogUpsertBulk {
	return u.Update(func(s *ATaskLogUpsert) {
		s.SetMeta(v)
	})
}

// UpdateMeta sets the "meta" field to the value that was provided on create.
func (u *ATaskLogUpsertBulk) UpdateMeta() *ATaskLogUpsertBulk {
	return u.Update(func(s *ATaskLogUpsert) {
		s.UpdateMeta()
	})
}

// SetMtime sets the "mtime" field.
func (u *ATaskLogUpsertBulk) SetMtime(v time.Time) *ATaskLogUpsertBulk {
	return u.Update(func(s *ATaskLogUpsert) {
		s.SetMtime(v)
	})
}

// UpdateMtime sets the "mtime" field to the value that was provided on create.
func (u *ATaskLogUpsertBulk) UpdateMtime() *ATaskLogUpsertBulk {
	return u.Update(func(s *ATaskLogUpsert) {
		s.UpdateMtime()
	})
}

// SetCtime sets the "ctime" field.
func (u *ATaskLogUpsertBulk) SetCtime(v time.Time) *ATaskLogUpsertBulk {
	return u.Update(func(s *ATaskLogUpsert) {
		s.SetCtime(v)
	})
}

// UpdateCtime sets the "ctime" field to the value that was provided on create.
func (u *ATaskLogUpsertBulk) UpdateCtime() *ATaskLogUpsertBulk {
	return u.Update(func(s *ATaskLogUpsert) {
		s.UpdateCtime()
	})
}

// Exec executes the query.
func (u *ATaskLogUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ATaskLogCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ATaskLogCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ATaskLogUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
