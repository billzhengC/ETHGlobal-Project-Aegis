// Code generated by ent, DO NOT EDIT.

package ent

import (
	"aegis/ent/tgonft"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// TGoNFT is the model entity for the TGoNFT schema.
type TGoNFT struct {
	config `json:"-"`
	// ID of the ent.
	// auto increment primary key
	ID uint64 `json:"id,omitempty"`
	// wallet public key
	WalletPub string `json:"wallet_pub,omitempty"`
	// type of rank, 0 monthly 1 quarterly 2 yearly
	RankType int `json:"rank_type,omitempty"`
	// year of rank
	RankYear int `json:"rank_year,omitempty"`
	// season of rank, 1-12 for monthly, 1-4 for quarterly, 0 for yearly
	RankSeason int `json:"rank_season,omitempty"`
	// rank in the leaderboard
	Rank int `json:"rank,omitempty"`
	// hash of mint tx
	MintTx string `json:"mint_tx,omitempty"`
	// modify time
	Mtime time.Time `json:"mtime,omitempty"`
	// create time
	Ctime time.Time `json:"ctime,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TGoNFT) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case tgonft.FieldID, tgonft.FieldRankType, tgonft.FieldRankYear, tgonft.FieldRankSeason, tgonft.FieldRank:
			values[i] = new(sql.NullInt64)
		case tgonft.FieldWalletPub, tgonft.FieldMintTx:
			values[i] = new(sql.NullString)
		case tgonft.FieldMtime, tgonft.FieldCtime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TGoNFT", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TGoNFT fields.
func (tn *TGoNFT) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tgonft.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tn.ID = uint64(value.Int64)
		case tgonft.FieldWalletPub:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field wallet_pub", values[i])
			} else if value.Valid {
				tn.WalletPub = value.String
			}
		case tgonft.FieldRankType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rank_type", values[i])
			} else if value.Valid {
				tn.RankType = int(value.Int64)
			}
		case tgonft.FieldRankYear:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rank_year", values[i])
			} else if value.Valid {
				tn.RankYear = int(value.Int64)
			}
		case tgonft.FieldRankSeason:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rank_season", values[i])
			} else if value.Valid {
				tn.RankSeason = int(value.Int64)
			}
		case tgonft.FieldRank:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rank", values[i])
			} else if value.Valid {
				tn.Rank = int(value.Int64)
			}
		case tgonft.FieldMintTx:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mint_tx", values[i])
			} else if value.Valid {
				tn.MintTx = value.String
			}
		case tgonft.FieldMtime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field mtime", values[i])
			} else if value.Valid {
				tn.Mtime = value.Time
			}
		case tgonft.FieldCtime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ctime", values[i])
			} else if value.Valid {
				tn.Ctime = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this TGoNFT.
// Note that you need to call TGoNFT.Unwrap() before calling this method if this TGoNFT
// was returned from a transaction, and the transaction was committed or rolled back.
func (tn *TGoNFT) Update() *TGoNFTUpdateOne {
	return (&TGoNFTClient{config: tn.config}).UpdateOne(tn)
}

// Unwrap unwraps the TGoNFT entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tn *TGoNFT) Unwrap() *TGoNFT {
	_tx, ok := tn.config.driver.(*txDriver)
	if !ok {
		panic("ent: TGoNFT is not a transactional entity")
	}
	tn.config.driver = _tx.drv
	return tn
}

// String implements the fmt.Stringer.
func (tn *TGoNFT) String() string {
	var builder strings.Builder
	builder.WriteString("TGoNFT(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tn.ID))
	builder.WriteString("wallet_pub=")
	builder.WriteString(tn.WalletPub)
	builder.WriteString(", ")
	builder.WriteString("rank_type=")
	builder.WriteString(fmt.Sprintf("%v", tn.RankType))
	builder.WriteString(", ")
	builder.WriteString("rank_year=")
	builder.WriteString(fmt.Sprintf("%v", tn.RankYear))
	builder.WriteString(", ")
	builder.WriteString("rank_season=")
	builder.WriteString(fmt.Sprintf("%v", tn.RankSeason))
	builder.WriteString(", ")
	builder.WriteString("rank=")
	builder.WriteString(fmt.Sprintf("%v", tn.Rank))
	builder.WriteString(", ")
	builder.WriteString("mint_tx=")
	builder.WriteString(tn.MintTx)
	builder.WriteString(", ")
	builder.WriteString("mtime=")
	builder.WriteString(tn.Mtime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ctime=")
	builder.WriteString(tn.Ctime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TGoNFTs is a parsable slice of TGoNFT.
type TGoNFTs []*TGoNFT

func (tn TGoNFTs) config(cfg config) {
	for _i := range tn {
		tn[_i].config = cfg
	}
}
