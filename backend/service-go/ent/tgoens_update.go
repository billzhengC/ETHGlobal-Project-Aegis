// Code generated by ent, DO NOT EDIT.

package ent

import (
	"aegis/ent/predicate"
	"aegis/ent/tgoens"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TGoEnsUpdate is the builder for updating TGoEns entities.
type TGoEnsUpdate struct {
	config
	hooks    []Hook
	mutation *TGoEnsMutation
}

// Where appends a list predicates to the TGoEnsUpdate builder.
func (teu *TGoEnsUpdate) Where(ps ...predicate.TGoEns) *TGoEnsUpdate {
	teu.mutation.Where(ps...)
	return teu
}

// SetWalletPub sets the "wallet_pub" field.
func (teu *TGoEnsUpdate) SetWalletPub(s string) *TGoEnsUpdate {
	teu.mutation.SetWalletPub(s)
	return teu
}

// SetEns sets the "ens" field.
func (teu *TGoEnsUpdate) SetEns(s string) *TGoEnsUpdate {
	teu.mutation.SetEns(s)
	return teu
}

// SetNillableEns sets the "ens" field if the given value is not nil.
func (teu *TGoEnsUpdate) SetNillableEns(s *string) *TGoEnsUpdate {
	if s != nil {
		teu.SetEns(*s)
	}
	return teu
}

// SetMtime sets the "mtime" field.
func (teu *TGoEnsUpdate) SetMtime(t time.Time) *TGoEnsUpdate {
	teu.mutation.SetMtime(t)
	return teu
}

// SetCtime sets the "ctime" field.
func (teu *TGoEnsUpdate) SetCtime(t time.Time) *TGoEnsUpdate {
	teu.mutation.SetCtime(t)
	return teu
}

// SetNillableCtime sets the "ctime" field if the given value is not nil.
func (teu *TGoEnsUpdate) SetNillableCtime(t *time.Time) *TGoEnsUpdate {
	if t != nil {
		teu.SetCtime(*t)
	}
	return teu
}

// Mutation returns the TGoEnsMutation object of the builder.
func (teu *TGoEnsUpdate) Mutation() *TGoEnsMutation {
	return teu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (teu *TGoEnsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	teu.defaults()
	if len(teu.hooks) == 0 {
		affected, err = teu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TGoEnsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			teu.mutation = mutation
			affected, err = teu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(teu.hooks) - 1; i >= 0; i-- {
			if teu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = teu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, teu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (teu *TGoEnsUpdate) SaveX(ctx context.Context) int {
	affected, err := teu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (teu *TGoEnsUpdate) Exec(ctx context.Context) error {
	_, err := teu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (teu *TGoEnsUpdate) ExecX(ctx context.Context) {
	if err := teu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (teu *TGoEnsUpdate) defaults() {
	if _, ok := teu.mutation.Mtime(); !ok {
		v := tgoens.UpdateDefaultMtime()
		teu.mutation.SetMtime(v)
	}
}

func (teu *TGoEnsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tgoens.Table,
			Columns: tgoens.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: tgoens.FieldID,
			},
		},
	}
	if ps := teu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := teu.mutation.WalletPub(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tgoens.FieldWalletPub,
		})
	}
	if value, ok := teu.mutation.Ens(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tgoens.FieldEns,
		})
	}
	if value, ok := teu.mutation.Mtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tgoens.FieldMtime,
		})
	}
	if value, ok := teu.mutation.Ctime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tgoens.FieldCtime,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, teu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tgoens.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// TGoEnsUpdateOne is the builder for updating a single TGoEns entity.
type TGoEnsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TGoEnsMutation
}

// SetWalletPub sets the "wallet_pub" field.
func (teuo *TGoEnsUpdateOne) SetWalletPub(s string) *TGoEnsUpdateOne {
	teuo.mutation.SetWalletPub(s)
	return teuo
}

// SetEns sets the "ens" field.
func (teuo *TGoEnsUpdateOne) SetEns(s string) *TGoEnsUpdateOne {
	teuo.mutation.SetEns(s)
	return teuo
}

// SetNillableEns sets the "ens" field if the given value is not nil.
func (teuo *TGoEnsUpdateOne) SetNillableEns(s *string) *TGoEnsUpdateOne {
	if s != nil {
		teuo.SetEns(*s)
	}
	return teuo
}

// SetMtime sets the "mtime" field.
func (teuo *TGoEnsUpdateOne) SetMtime(t time.Time) *TGoEnsUpdateOne {
	teuo.mutation.SetMtime(t)
	return teuo
}

// SetCtime sets the "ctime" field.
func (teuo *TGoEnsUpdateOne) SetCtime(t time.Time) *TGoEnsUpdateOne {
	teuo.mutation.SetCtime(t)
	return teuo
}

// SetNillableCtime sets the "ctime" field if the given value is not nil.
func (teuo *TGoEnsUpdateOne) SetNillableCtime(t *time.Time) *TGoEnsUpdateOne {
	if t != nil {
		teuo.SetCtime(*t)
	}
	return teuo
}

// Mutation returns the TGoEnsMutation object of the builder.
func (teuo *TGoEnsUpdateOne) Mutation() *TGoEnsMutation {
	return teuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (teuo *TGoEnsUpdateOne) Select(field string, fields ...string) *TGoEnsUpdateOne {
	teuo.fields = append([]string{field}, fields...)
	return teuo
}

// Save executes the query and returns the updated TGoEns entity.
func (teuo *TGoEnsUpdateOne) Save(ctx context.Context) (*TGoEns, error) {
	var (
		err  error
		node *TGoEns
	)
	teuo.defaults()
	if len(teuo.hooks) == 0 {
		node, err = teuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TGoEnsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			teuo.mutation = mutation
			node, err = teuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(teuo.hooks) - 1; i >= 0; i-- {
			if teuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = teuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, teuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TGoEns)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TGoEnsMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (teuo *TGoEnsUpdateOne) SaveX(ctx context.Context) *TGoEns {
	node, err := teuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (teuo *TGoEnsUpdateOne) Exec(ctx context.Context) error {
	_, err := teuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (teuo *TGoEnsUpdateOne) ExecX(ctx context.Context) {
	if err := teuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (teuo *TGoEnsUpdateOne) defaults() {
	if _, ok := teuo.mutation.Mtime(); !ok {
		v := tgoens.UpdateDefaultMtime()
		teuo.mutation.SetMtime(v)
	}
}

func (teuo *TGoEnsUpdateOne) sqlSave(ctx context.Context) (_node *TGoEns, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tgoens.Table,
			Columns: tgoens.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: tgoens.FieldID,
			},
		},
	}
	id, ok := teuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TGoEns.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := teuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tgoens.FieldID)
		for _, f := range fields {
			if !tgoens.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tgoens.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := teuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := teuo.mutation.WalletPub(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tgoens.FieldWalletPub,
		})
	}
	if value, ok := teuo.mutation.Ens(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tgoens.FieldEns,
		})
	}
	if value, ok := teuo.mutation.Mtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tgoens.FieldMtime,
		})
	}
	if value, ok := teuo.mutation.Ctime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tgoens.FieldCtime,
		})
	}
	_node = &TGoEns{config: teuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, teuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tgoens.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
