// Code generated by ent, DO NOT EDIT.

package tgonft

import (
	"aegis/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// WalletPub applies equality check predicate on the "wallet_pub" field. It's identical to WalletPubEQ.
func WalletPub(v string) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWalletPub), v))
	})
}

// RankType applies equality check predicate on the "rank_type" field. It's identical to RankTypeEQ.
func RankType(v int) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRankType), v))
	})
}

// RankYear applies equality check predicate on the "rank_year" field. It's identical to RankYearEQ.
func RankYear(v int) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRankYear), v))
	})
}

// RankSeason applies equality check predicate on the "rank_season" field. It's identical to RankSeasonEQ.
func RankSeason(v int) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRankSeason), v))
	})
}

// Rank applies equality check predicate on the "rank" field. It's identical to RankEQ.
func Rank(v int) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRank), v))
	})
}

// MintTx applies equality check predicate on the "mint_tx" field. It's identical to MintTxEQ.
func MintTx(v string) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMintTx), v))
	})
}

// Mtime applies equality check predicate on the "mtime" field. It's identical to MtimeEQ.
func Mtime(v time.Time) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMtime), v))
	})
}

// Ctime applies equality check predicate on the "ctime" field. It's identical to CtimeEQ.
func Ctime(v time.Time) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCtime), v))
	})
}

// WalletPubEQ applies the EQ predicate on the "wallet_pub" field.
func WalletPubEQ(v string) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWalletPub), v))
	})
}

// WalletPubNEQ applies the NEQ predicate on the "wallet_pub" field.
func WalletPubNEQ(v string) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWalletPub), v))
	})
}

// WalletPubIn applies the In predicate on the "wallet_pub" field.
func WalletPubIn(vs ...string) predicate.TGoNFT {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldWalletPub), v...))
	})
}

// WalletPubNotIn applies the NotIn predicate on the "wallet_pub" field.
func WalletPubNotIn(vs ...string) predicate.TGoNFT {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldWalletPub), v...))
	})
}

// WalletPubGT applies the GT predicate on the "wallet_pub" field.
func WalletPubGT(v string) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWalletPub), v))
	})
}

// WalletPubGTE applies the GTE predicate on the "wallet_pub" field.
func WalletPubGTE(v string) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWalletPub), v))
	})
}

// WalletPubLT applies the LT predicate on the "wallet_pub" field.
func WalletPubLT(v string) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWalletPub), v))
	})
}

// WalletPubLTE applies the LTE predicate on the "wallet_pub" field.
func WalletPubLTE(v string) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWalletPub), v))
	})
}

// WalletPubContains applies the Contains predicate on the "wallet_pub" field.
func WalletPubContains(v string) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWalletPub), v))
	})
}

// WalletPubHasPrefix applies the HasPrefix predicate on the "wallet_pub" field.
func WalletPubHasPrefix(v string) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWalletPub), v))
	})
}

// WalletPubHasSuffix applies the HasSuffix predicate on the "wallet_pub" field.
func WalletPubHasSuffix(v string) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWalletPub), v))
	})
}

// WalletPubEqualFold applies the EqualFold predicate on the "wallet_pub" field.
func WalletPubEqualFold(v string) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWalletPub), v))
	})
}

// WalletPubContainsFold applies the ContainsFold predicate on the "wallet_pub" field.
func WalletPubContainsFold(v string) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWalletPub), v))
	})
}

// RankTypeEQ applies the EQ predicate on the "rank_type" field.
func RankTypeEQ(v int) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRankType), v))
	})
}

// RankTypeNEQ applies the NEQ predicate on the "rank_type" field.
func RankTypeNEQ(v int) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRankType), v))
	})
}

// RankTypeIn applies the In predicate on the "rank_type" field.
func RankTypeIn(vs ...int) predicate.TGoNFT {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRankType), v...))
	})
}

// RankTypeNotIn applies the NotIn predicate on the "rank_type" field.
func RankTypeNotIn(vs ...int) predicate.TGoNFT {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRankType), v...))
	})
}

// RankTypeGT applies the GT predicate on the "rank_type" field.
func RankTypeGT(v int) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRankType), v))
	})
}

// RankTypeGTE applies the GTE predicate on the "rank_type" field.
func RankTypeGTE(v int) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRankType), v))
	})
}

// RankTypeLT applies the LT predicate on the "rank_type" field.
func RankTypeLT(v int) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRankType), v))
	})
}

// RankTypeLTE applies the LTE predicate on the "rank_type" field.
func RankTypeLTE(v int) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRankType), v))
	})
}

// RankYearEQ applies the EQ predicate on the "rank_year" field.
func RankYearEQ(v int) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRankYear), v))
	})
}

// RankYearNEQ applies the NEQ predicate on the "rank_year" field.
func RankYearNEQ(v int) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRankYear), v))
	})
}

// RankYearIn applies the In predicate on the "rank_year" field.
func RankYearIn(vs ...int) predicate.TGoNFT {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRankYear), v...))
	})
}

// RankYearNotIn applies the NotIn predicate on the "rank_year" field.
func RankYearNotIn(vs ...int) predicate.TGoNFT {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRankYear), v...))
	})
}

// RankYearGT applies the GT predicate on the "rank_year" field.
func RankYearGT(v int) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRankYear), v))
	})
}

// RankYearGTE applies the GTE predicate on the "rank_year" field.
func RankYearGTE(v int) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRankYear), v))
	})
}

// RankYearLT applies the LT predicate on the "rank_year" field.
func RankYearLT(v int) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRankYear), v))
	})
}

// RankYearLTE applies the LTE predicate on the "rank_year" field.
func RankYearLTE(v int) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRankYear), v))
	})
}

// RankSeasonEQ applies the EQ predicate on the "rank_season" field.
func RankSeasonEQ(v int) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRankSeason), v))
	})
}

// RankSeasonNEQ applies the NEQ predicate on the "rank_season" field.
func RankSeasonNEQ(v int) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRankSeason), v))
	})
}

// RankSeasonIn applies the In predicate on the "rank_season" field.
func RankSeasonIn(vs ...int) predicate.TGoNFT {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRankSeason), v...))
	})
}

// RankSeasonNotIn applies the NotIn predicate on the "rank_season" field.
func RankSeasonNotIn(vs ...int) predicate.TGoNFT {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRankSeason), v...))
	})
}

// RankSeasonGT applies the GT predicate on the "rank_season" field.
func RankSeasonGT(v int) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRankSeason), v))
	})
}

// RankSeasonGTE applies the GTE predicate on the "rank_season" field.
func RankSeasonGTE(v int) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRankSeason), v))
	})
}

// RankSeasonLT applies the LT predicate on the "rank_season" field.
func RankSeasonLT(v int) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRankSeason), v))
	})
}

// RankSeasonLTE applies the LTE predicate on the "rank_season" field.
func RankSeasonLTE(v int) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRankSeason), v))
	})
}

// RankEQ applies the EQ predicate on the "rank" field.
func RankEQ(v int) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRank), v))
	})
}

// RankNEQ applies the NEQ predicate on the "rank" field.
func RankNEQ(v int) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRank), v))
	})
}

// RankIn applies the In predicate on the "rank" field.
func RankIn(vs ...int) predicate.TGoNFT {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRank), v...))
	})
}

// RankNotIn applies the NotIn predicate on the "rank" field.
func RankNotIn(vs ...int) predicate.TGoNFT {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRank), v...))
	})
}

// RankGT applies the GT predicate on the "rank" field.
func RankGT(v int) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRank), v))
	})
}

// RankGTE applies the GTE predicate on the "rank" field.
func RankGTE(v int) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRank), v))
	})
}

// RankLT applies the LT predicate on the "rank" field.
func RankLT(v int) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRank), v))
	})
}

// RankLTE applies the LTE predicate on the "rank" field.
func RankLTE(v int) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRank), v))
	})
}

// MintTxEQ applies the EQ predicate on the "mint_tx" field.
func MintTxEQ(v string) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMintTx), v))
	})
}

// MintTxNEQ applies the NEQ predicate on the "mint_tx" field.
func MintTxNEQ(v string) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMintTx), v))
	})
}

// MintTxIn applies the In predicate on the "mint_tx" field.
func MintTxIn(vs ...string) predicate.TGoNFT {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMintTx), v...))
	})
}

// MintTxNotIn applies the NotIn predicate on the "mint_tx" field.
func MintTxNotIn(vs ...string) predicate.TGoNFT {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMintTx), v...))
	})
}

// MintTxGT applies the GT predicate on the "mint_tx" field.
func MintTxGT(v string) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMintTx), v))
	})
}

// MintTxGTE applies the GTE predicate on the "mint_tx" field.
func MintTxGTE(v string) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMintTx), v))
	})
}

// MintTxLT applies the LT predicate on the "mint_tx" field.
func MintTxLT(v string) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMintTx), v))
	})
}

// MintTxLTE applies the LTE predicate on the "mint_tx" field.
func MintTxLTE(v string) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMintTx), v))
	})
}

// MintTxContains applies the Contains predicate on the "mint_tx" field.
func MintTxContains(v string) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMintTx), v))
	})
}

// MintTxHasPrefix applies the HasPrefix predicate on the "mint_tx" field.
func MintTxHasPrefix(v string) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMintTx), v))
	})
}

// MintTxHasSuffix applies the HasSuffix predicate on the "mint_tx" field.
func MintTxHasSuffix(v string) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMintTx), v))
	})
}

// MintTxEqualFold applies the EqualFold predicate on the "mint_tx" field.
func MintTxEqualFold(v string) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMintTx), v))
	})
}

// MintTxContainsFold applies the ContainsFold predicate on the "mint_tx" field.
func MintTxContainsFold(v string) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMintTx), v))
	})
}

// MtimeEQ applies the EQ predicate on the "mtime" field.
func MtimeEQ(v time.Time) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMtime), v))
	})
}

// MtimeNEQ applies the NEQ predicate on the "mtime" field.
func MtimeNEQ(v time.Time) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMtime), v))
	})
}

// MtimeIn applies the In predicate on the "mtime" field.
func MtimeIn(vs ...time.Time) predicate.TGoNFT {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMtime), v...))
	})
}

// MtimeNotIn applies the NotIn predicate on the "mtime" field.
func MtimeNotIn(vs ...time.Time) predicate.TGoNFT {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMtime), v...))
	})
}

// MtimeGT applies the GT predicate on the "mtime" field.
func MtimeGT(v time.Time) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMtime), v))
	})
}

// MtimeGTE applies the GTE predicate on the "mtime" field.
func MtimeGTE(v time.Time) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMtime), v))
	})
}

// MtimeLT applies the LT predicate on the "mtime" field.
func MtimeLT(v time.Time) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMtime), v))
	})
}

// MtimeLTE applies the LTE predicate on the "mtime" field.
func MtimeLTE(v time.Time) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMtime), v))
	})
}

// CtimeEQ applies the EQ predicate on the "ctime" field.
func CtimeEQ(v time.Time) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCtime), v))
	})
}

// CtimeNEQ applies the NEQ predicate on the "ctime" field.
func CtimeNEQ(v time.Time) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCtime), v))
	})
}

// CtimeIn applies the In predicate on the "ctime" field.
func CtimeIn(vs ...time.Time) predicate.TGoNFT {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCtime), v...))
	})
}

// CtimeNotIn applies the NotIn predicate on the "ctime" field.
func CtimeNotIn(vs ...time.Time) predicate.TGoNFT {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCtime), v...))
	})
}

// CtimeGT applies the GT predicate on the "ctime" field.
func CtimeGT(v time.Time) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCtime), v))
	})
}

// CtimeGTE applies the GTE predicate on the "ctime" field.
func CtimeGTE(v time.Time) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCtime), v))
	})
}

// CtimeLT applies the LT predicate on the "ctime" field.
func CtimeLT(v time.Time) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCtime), v))
	})
}

// CtimeLTE applies the LTE predicate on the "ctime" field.
func CtimeLTE(v time.Time) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCtime), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TGoNFT) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TGoNFT) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TGoNFT) predicate.TGoNFT {
	return predicate.TGoNFT(func(s *sql.Selector) {
		p(s.Not())
	})
}
